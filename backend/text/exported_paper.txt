
Machine Learning Techniques for Malware Detection with Challenges and Future Directions (2022) by Alqhatani, Mohammed A
Abstract:
In the recent times Cybersecurity is the hot research topic because of its sensitivity. Especially at the times of digital world where everything is now transformed into digital medium. All the critical transactions are being carried out online with internet applications. Malware is an important issue which has the capability of stealing the privacy and funds from an ordinary person who is doing sensitive transactions through his mobile device. Researchers in the current time are striving to develop efficient techniques to detect these kinds of attacks. Not only individuals are getting offended even the governments are getting effected by these kinds of attacks and losing big amount of funds. In this work various Artificial intelligent and machine learning techniques are discussed which were implements for the detection of malware. Traditional machine learning techniques like Decision tree, K-Nearest Neighbor and Support vector machine and further to advanced machine learning techniques like Artificial neural network and convolution neural network are discussed. Among the discussed techniques, the work got the highest accuracy is 99% followed by 98.422%, 97.3% and 96% where the authors have implemented package-level API calls as feature, followed by advanced classification technique. Also, dataset details are discussed and listed which were used for the experimentation of malware detection, among the many dataset DREBIN had the most significant number of samples with 123453 Benign samples and 5560 Malware samples. Finally, open challenges are listed, and the future directions are highlighted which would encourage a new researcher to adopt this field of research and solve these open challenges with the help of future direction details provided in this paper. The paper is concluded with the limitation and conclusion sectio

FullText:
258 International Journal of Communication Networks and Information Security (IJCNIS)                                        Vol. 13, No. 2, August 2021  Machine Learning Techniques for Malware Detection with Challenges and Future Directions  Mohammed A. Alqahtani1  1Department of Computer Information Systems, College of Computer Science and Information Technology, Imam Abdulrahman Bin Faisal University, Dammam 31441, Saudi Arabia    



Abstract: In the recent times Cybersecurity is the hot research topic because of its sensitivity. Especially at the times of digital world where everything is now transformed into digital medium. All the critical transactions are being carried out online with internet applications. Malware is an important issue which has the capability of stealing the privacy and funds from an ordinary person who is doing sensitive transactions through his mobile device. Researchers in the current time are striving to develop efficient techniques to detect these kinds of attacks. Not only individuals are getting offended even the governments are getting effected by these kinds of attacks and losing big amount of funds. In this work various Artificial intelligent and machine learning techniques are discussed which were implements for the detection of malware. Traditional machine learning techniques like Decision tree, K-Nearest Neighbor and Support vector machine and further to advanced machine learning techniques like Artificial neural network and convolution neural network are discussed. Among the discussed techniques, the work got the highest accuracy is 99% followed by 98.422%, 97.3% and 96% where the authors have implemented package-level API calls as feature, followed by advanced classification technique. Also, dataset details are discussed and listed which were used for the experimentation of malware detection, among the many dataset DREBIN had the most significant number of samples with 123453 Benign samples and 5560 Malware samples. Finally, open challenges are listed, and the future directions are highlighted which would encourage a new researcher to adopt this field of research and solve these open challenges with the help of future direction details provided in this paper. The paper is concluded with the limitation and 

Conclusion 



Section.  



Keywords: Artificial neural network, convolution neural network, cybersecurity, malware, machine learning, support vector machine.  1. 



Introduction  Technologies related to smart cities are combined with Android OS applications as these applications are supporting the smart city requirements. Android is playing an essential role in various fields in the current development phase of the earth. These applications are helping different sectors like competent government, intelligent transportation, and other energy resources management [1][2]. The facilities provided by Android are allowing developers to utilize them in their applications. Still, at the same time, it is acting as a source to attackers like malware which is targeting the Android to cause serious threats which are leading to financial loss, leakage of critical data, and security concerns for nations [3]. Based on the excellent features offered by Android and flexible to adopt technologies, it has captured as much as 80% of smartphone users. But, at the same time, it has become a significant source for malware attacks [4]. Based on this report [5], as many as four million fresh malicious applications were developed during 2019. The average time in which the hackers create an infected APP is around every eight seconds. This statistic of malware attacks and the development of malicious applications are alarming and becoming a source of a significant threat to cyber-security. So, well-managed and efficient detection methods are need of the hour for Android malware, and it needs urgent attention from computer professionals to develop tools to detect these attacks significantly to improve mobile security [6]. Another study conducted by Juniper Networks Mobile Threat Centre (MTC) [7] has reported as many as 155 % of the increase in mobile malware attacks in 2011 compared to previous years in almost all the platforms. Also, with regards to Android malware, there is an increase of about 3000 % during 2011. Based on these statistics and numbers, a significant increase in malware was reported in third-party Android applications enjoying the same privileges as an actual application available in the Google Play Store. The reason for this increase in the numbers is, in the past, any Android developer had the privilege to develop an application and post them immediately at the official Android Market without screening the application for the presence of malware and inspecting the application. Another reason for the drastic increase in malware is due to the blending of Google Android dominant market and smartphones and their share, which was around 68.8% during 2012, and the absence of efficient security control 



Methodology to control the applications which are being posted on Android application markets. In a recent study, the reports state that as many as 700,000 apps have crossed 15 billion downloads in the Google Play Store. As these numbers are increasing so also the money stealing malware is also growing based on the security firm Fortinet which was done during 2006-2011. Malware detection methods are classified into two categories based on the process by which they are detected, like signature-based method or behavior-based method. In the current scenario, signature-based malware detection is working fine for the previously detected malware, which was done with the help of anti-malware vendors. But the polymorphic malware is not yet detected, which can change the signatures. Also, new malware which is expected to occur in the future cannot be detected by these traditional methodologies. So, the best solution that is recommended by researchers is utilizing the heuristic analysis along with the machine learning techniques that could provide better solutions with higher efficiency for detection. As practice has shown, the traditional approach to the field of malware detection, which is based on signature analysis [8], is not acceptable for detecting unknown computer viruses.  259 International Journal of Communication Networks and Information Security (IJCNIS)                                        Vol. 13, No. 2, August 2021  In the current times, mobile security researchers are working hard to counter the risk of malicious Apps. They are proposing various defense approaches especially novel methodologies to detect malware. These methodologies are based on machine learning techniques which are proving to be very efficient in various research fields in solving their problems. Further to machine learning, they are also implementing advanced techniques like deep learning, which is attracting security researchers of multiple areas to implement this technique [9] [10]. The process of utilizing machine learning techniques for the detection of state-of-the-art malware attacks could be generally classified into three categories: Static feature [11] [12], dynamic feature [13] [14], and mixed feature [15] [16]. The most critical aspect of machine learning to get good accuracy in the result is feature selection. It is also used during training the model. The more accurate the features are, the more robust the model is, and the more would be the classification accuracy [17] [18] [19]. The feature selection is a crucial step in machine learning to enhance the performance of the model and also to make a robust model all the irrelevant features and redundant features should be removed, and sophisticated features which play a significant role should be selected. This process is time-consuming as the result of machine learning depends on this step. The outline of this paper is as shown in Fig. 1. The significant contributions of this study are as follows: • Databases related to malware detection are listed in the paper along with the methodologies and techniques applied on these datasets to detect malware. • The author has collected the relevant techniques for the detection of malware. • The techniques focused in this study are tradition classification, Artificial neural network and Convolution neural network • Relevant and latest features extraction techniques applied for the classification of malware are discussed with their 

Results. • The author has listed the current open challenges for detecting malware. • The author has listed future directions for a potential researcher to motivate and provide enough information to take this research work further by solving the open challenges.  • The author tried to represent all the essential information into tabular format with the reference number.     Figure 1. General 

Overview of the paper  The rest of the paper is as follows: 



Section 1 gives the complete 



Introduction about the research field, 



Section 2 discusses the primary classification techniques with their technical details, 



Section 3 provides the database with more information which is applied for malware detection, and the researchers who used these databases for experimentation, 



Section 4 gives the detail description of researchers who applied various classification technique to detect malware,  



Section 5 discusses the open challenges and future scope of the work, 



Section 6 has the 

Conclusion 



Section, followed by 



Section 7 as 

Limitations and 8 with future scope, followed by the reference list. 2. Related Work Machine learning techniques are currently applied in various applications. So, Malware detection is no exception. It is playing an essential role in detecting malware more efficiently compared to traditional techniques. In this 



Section, malware detection based on various machine learning techniques like Support vector machine, Artificial neural network, and Convolution neural network is discussed with the features extraction details and the 

Results achieved.   2.1 Malware detection based on classical techniques The authors in this work [20] introduced a 



Methodology that has the capability of extracting the features automatically. The system was developed using JavaScript, and the detection is static. This system takes the input as .apk Android executable files. The following are the features extracted by the system: API count for each method related to phone management and API code of  relation with phone control and API related to privacy information. Further, after the extraction of features, the author has used the J48 Decision Tree classification method for classifying using the Weka library. The authors followed 10-fold cross-validation. The ultimate 

Results of this 



Methodology are 82.7 % accuracy in classifying the malware, and the false-negative rate is 17.3%.  In another work [21], a rooted Android device was used with Linux-based tools to capture the calls received on the system. The feature vectors were collected by capturing the number from each call received by the system with the help of the Android application. The following were the most relevant system calls captured based on the experimentation: read (), open(), access(), and chow(). To distinguish between a benign and malware version, the authors applied a 2-means clustering algorithm.  The authors in this work [22] designed a real-time anomaly detector. The technique is based on a 1-Nearest Neighbor classifier. The total number of features extracted was 13. Two features were examined at the user's end depending on the phone's active or inactive position and based on the SMS which are sent while the phone was inactive. The 



Methodology was based on two models, first to capture the features at every 1-second interval, and the other is captured at every one-minute interval. The system was evaluated for ten genuine malware samples, and the authors claim to detect as much as 93% of malware detected correctly, while the false-positive rate was 0.0001. In another work [23], the authors worked on 88 features with an unrooted device. These features were experimented on two machines which were real and among two different users. The testing was done with 16 benign and 4 self-made malware. The features were monitored by the model at an interval for every 2 seconds. The following are the classifiers used by the authors k-Means, Logistic Regression, Histograms, Decision Tree, Bayesian Networks, and Naive Bayes. Apart from the classifiers, the authors also applied 260 International Journal of Communication Networks and Information Security (IJCNIS)                                        Vol. 13, No. 2, August 2021  filters for the selection of relevant features by comparing them with Chi-Square, Fisher Score, and Information Gain. Based on the experimentation, the authors claim 80% detection of malware with the available 88 features. The false-positive rate was 0.12. The authors in this work [24] also did a comparative analysis between different classification algorithms. They used 500 Android .apk files to make the classification and processing. In this work, 160 permissions were used as feature vectors. The comparison was made among Random Forest, J48 Decision Tree, and Classification and Regression Tree (CART) algorithms. But unfortunately, the 

Results were not claimed.  A malware detection study was conducted by [26] for Android platform. The classification technique applied here is SVM, and the features used for classification were a combination of vulnerable API calls and risky permission of calls. Extensive experimentations were carried to validate the proposed 



Methodology which can detect the malware and further identify the malicious Android applications more efficiently. The dataset used for this experiment was taken from [27]. The experiments were also conducted on datasets downloaded from benign apps from Google play to validate and do some comparative analysis.  Similarly, in this study [25] data mining technique is applied to detect the malicious software and the authors applied experimentation and investigation to detect the malware by applying the SVM algorithm. The purpose of this work was to detect the malware rate for the SVM method. The result of this study after applying SVM algorithm was the probability of detecting around 74-83% malware. The detection is done by the models developed with SVM and using enough datasets of malicious software’s. Related Techniques are listed in table 1.   2.2 Malware detection based on artificial neural networks  The authors in this work [28], investigate the behavior of malicious data. The experimentation was conducted on features extracted from Global wavelet transform and GIST. The dataset used in this experimentation was Mahenur, it consists of 3131 samples of binaries with 24 unique malware families. Feedforward Artificial Neural Network technique was applied for the experiment. The authors claim up to 96.35% of accuracy in detecting and classifying the malware.   In this work [29], the authors have applied a sequence mining algorithm for the detection of malware patterns. The feature used in this experimentation is the instruction sequence extracted from the sample files. Then, All-Nearest-Neighbor (ANN) classifier is applied to detect the malware based on the features extracted in the patterns form. The framework was based on pattern mining 



Methodology along with ANN classifier.  The proposed method is then evaluated by the real and unseen malware samples. The 

Results were outstanding; wherein this method outperformed all the other alternate data mining approaches. The dataset used to do the experimentation was collected from Windows PE samples which were 10,307 among which 8847 were malicious files, and 1460 were benign files. The authors in this work [30] have applied various classical machine learning classifiers also deep neural network and proposed a system to detect malware attacks on Android systems. The significant contribution was extracting the relevant features, which are also sensitive. They have designed and developed a static analysis tool for the feature extraction step. The outcome of this approach is around 97.3% of accuracy for the true positive rate.   In another work [31] for malware detection, the authors here have applied a different approach wherein the sensitive packages which cause the malware attacks are detected. These are called package-level API calls, which are found in common inside malicious apps. This approach is also capable of extracting another package level that gives the feature details for a large set of Android malware. This technique gave good 

Results with around 99% of accuracy and a false positive rate of 2.2%.  In another work [27], the significant contribution was working on extracting features. The features were extracted from the manifest file and from the source code of the application. These features were then trained with an SVM classifier. The classifier was able to classify and detect malware based on the features provided, and further, it achieved good accuracy and performance for the detection of malware.   The authors in this work applied a different approach to detect the malware [32], semantic features were extracted from the weighted contextual API. These APIs were used to draw dependency graphs further to classify them as Android malware or not. The proposed system is capable of effectively fighting against malware.   Another feature extraction technique was proposed by [33], to detect malware. Here the authors have applied the Markov chain to the sequence of API calls and then extract the relevant features. After removing these features, then traditional classification 



Methodology is used to classify and detect the malware.  In this work [34], features were extracted from permissions and API calls. These features were extracted from the files stored in the Android manifest file. These extracted features were then applied for classification using the K-nearest neighbor algorithm. These classifiers are used to classify benign and malware apps. The 

Results were further improved after applying the K-means algorithm. The 

Results are summaries as shown in Tab. 2.    2.3 Malware detection based on convolution neural network  In recent times CNN is widely used in many applications because of its capability to handle big datasets and pattern-matching tasks. The latest application of CNN is on IoT and the usage of the internet by the common users. These internet facilities have attracted many users and collected Hugh amount of data and at the same time opened gates for numerous vulnerabilities for attackers and make cyber-attacks. There is no robust security solution to handle these kinds of attacks and detection methodologies for the developing IoT environments, which has invited many developers and researchers to find efficient solutions for numerous DDoS attacks. So, CNN plays a vital role in this aspect by detecting the possible DDoS malware attacks for large datasets using CNN-based algorithms. The following are few works done by the researcher for detecting malware using CNN algorithms. In this work [35], the authors have proposed a 



Methodology to detect malware. The approach followed is a light-weight malware detection, wherein initially, the malware is converted into a one-channel gray-scale image. These 261 International Journal of Communication Networks and Information Security (IJCNIS)                                        Vol. 13, No. 2, August 2021  images are then used to extract features that ultimately represent light-weight CNN to detect the malware and its family. The outcome of this 



Methodology is the accuracy of 94.0% under the two-class classification, while the accuracy achieved was 81.8% for the three-class classification. These 

Results were then compared with [36] with a similar 



Methodology for the classification of malware. The difference among these two methodologies was the difference in the number of  layers as [36] used very deep network, and the pre-processing step was very complex.    Another similar work is conducted by [35], wherein the authors took raw features for classification. This method can detect only two types of malware very effectively because of the simplicity of the classification method.  This 



Methodology is very suitable for IoT devices wherein only the first layer is used for malware detection. Some other works also represent similar kinds of contributions where a great deal of research is done based on neural network [37] [38] [39]. Similar work was done by [40], by utilizing CNN with a large-scale 



Methodology. This technique was developed to classify malware based on random projections. However, the accuracy did not improve even after increasing the number of hidden layers. In another work [41], the authors applied feed-forward DNNs for malware detection and classification using static 



Methodology. But, they could not provide significant 

Results and improvement inaccuracy. Multi-tasking approach was introduced by [42], wherein the authors applied multi-tasking learning with the combination of feedforward and neural network. The number of layers utilized in this approach was four hidden layers, but the 

Results were not discussed very clearly.   In recent types, the authors in this work [43] have introduced a feature extraction technique (word2vec). These features were extracted based on DL and represent more like malware which is based on opcodes. The proposed 



Methodology included a gradient boosting algorithm and k-fold cross-validation to assess and evaluate the 



Methodology's performance. The dataset used in this experimentation was minimal, and the authors claim a 96% accuracy which seems to be better than other similar works.  In this work [44], the authors introduced a new approach of converting the API call sequence into RGB images. This conversion is done by mapping the corresponding protection levels depending on the permissions required for the API call. Then these API call sequences, along with the protection level, were converted into RGB images. The authors have used CNN and developed a model to detect the malware. The accuracy produced by this 



Methodology was around 93%. The dataset used for experimentation was 7192 benign and 24461 malicious samples.  In another work [45], a similar strategy was applied for feature extraction. Here the authors have utilized the static method to extract the features. The authors have extracted 138 features into four different categories and then converted these permissions features into 12x12 PNG images. Then, CNN is applied to train the model and detect the malware. For the experimentation 2500, Android applications were used, and the dataset had 2000 malicious and 500 benign samples. The 

Results achieved were 93% accuracy in detecting the malware.  Similarly, in this work [46], the authors also converted the .dex files into RGB color codes and then into color images. These images were at a fixed size. Then the images were put into CNN as inputs for the extraction of automatic features and further to the training process. Here the dataset used for experimentation was 2 million benign and malicious Android applications. The outcome if this experimentation was accuracy of 98.4225% of malware detection.  Another 



Methodology to extract features was introduced in [47], where texture fingerprints were applied to remove the malware features. The texture image information extracted from the sample applications codes was utilized in this 



Methodology. To detect the Android malware, these codes were mapped with the uncompressed gray value, and further, they were combined with the API. These combinations of code and API call features led to the detection of malware. The technique applied in this 



Methodology is a deep belief network. The dataset used contained 6956 samples and the proposed model yield 95.6% of malware detection accuracy. The authors in this work [48], did similar work by converting the APK code into images and then applying CNN to classify the images and detect the malware. The dataset used in this experimentation was 720 benign samples and 720 malicious samples. The model got an accuracy of 92.67% for detecting the malware. In another work [49], the semantic graph technique is applied to extract the features from the Android application, and then CNN is used to train the model. The dataset is collected from various sources like Marvin, Drebin, VirusShare, and ContagioDump. This 



Methodology got an accuracy of 99% in detecting the malware. In another graph-based technique [50], the features were extracted from API call graphs and applied the features to deep neural network, and the dataset consisted of 33,139 malicious and 25,000 benign samples. The 

Results got 98.9% of accuracy in detecting the malware.   The 

Summary of the above-discussed techniques is as shown in Tab. 3. In this work [51], a dynamic android malware analysis technique is proposed for the detection of possible malware. Here the authors have constructed OS-level and Java-level semantic views. The system is capable of tracking the changes in the files such as threads and processes. It can detect the malware through system calls and Dalvik instructions. These details are provided for the dynamic analysis.   3. Datasets   To effectively evaluate the performance of the classical machine learning and deep learning techniques, a large dataset is needed with relevant information consisting of various types of samples. Unfortunately, there is no such dataset available publicly to conduct research in cybersecurity and malware detection. The reason for this unavailability is the privacy-preserving policies. Since each organization has some individual privacy policies, it is difficult to collect a large dataset for malware detection. In the current times, malware has increased, as statistics show, keeping all these growing malware and their families together in one place is a difficult task. Although researchers are making a significant contribution to this field but still their findings are not recognized because of the shortage of a single dataset which can accommodate all the required samples. So, there is a need for such repositories to help the researchers to accomplish their tasks more efficiently. There are many researchers who could manage to acquire some data for processing and detecting the malware, so here are 262 International Journal of Communication Networks and Information Security (IJCNIS)                                        Vol. 13, No. 2, August 2021  some of the works that have used some available datasets and their training and testing details. In this work [52], the authors have utilized the publicly available dataset named Ember. This dataset consists of both malicious and benign files. It has 70,140 benign files and 69,860 malicious files. These files are used to train the model, and the dataset is divided into training and testing files. They have divided the dataset as 60% for training and 40% as testing by applying Scikit-learn. The number of files that came under training is 42,140 benign while 41,860 as malicious files, while for the testing dataset 28,000 files for benign and 28,000 as malicious. In another work [53], the authors tried to find the kind of malware or to determine the family with which this malware belongs. To evaluate the findings, they have utilized the dataset in two formats, one set which consists of both the benign and malicious files together and in another set only malicious files the details are as shown in Tab. 4 and Tab. 5, respectively. The authors tried to find whether a given app is malicious or not? And look for the most relevant attribute which can help in determining the family of the detected malware. The experiments were conducted, and the 

Results were evaluated on two datasets Malgenome [54] and Drebin [27]. These two datasets made around 33,000 files combined from the two datasets.  The authors also tried to validate their findings with another two more datasets acquired from virus share.com, Contagio  Minidump [55]. The authors in this work [56] did a similar study wherein they developed a model to detect whether the downloaded application is benign or malware. They have used an online malware scanning application called VirusTotal [57] in the experimentation stages. To evaluate their work 20,000 malware samples were used from VirusShare [58] and 1,260 from the Malgenome project files [59], and additionally 20,000 files from Google Play App Store [60]; these files were selected during the time period of March 2015 till April 2016.    It is a fact that most of Android application are non-malicious. This reality is becoming a challenge for Android malware detection, especially for deep learning technique. To detect Android malware, large amount of data is needed, and these data samples should be constantly updated with malicious samples. This would help the deep learning models to detect the Android malware. But unfortunately, most of the datasets are not much large, which is a challenge for deep learning experts. The following are some of the datasets available for researchers to use with their technical details along with their acquisition dates. DREBIN dataset [27], is considered as the commonly used dataset for detecting Android malware, it consists of 5,560 malicious samples while 123,453 benign samples. This dataset was collected during August 2010 till October 2012.  Another dataset available for malware detection is Android Malware Genome Project data [63].  This dataset consists of 1260 samples related to malicious while 863 benign samples. The malicious samples are grouped into 49 different categories. The dates of its acquisition are from August 2010 until October 2011.  Contagio [64], is another available dataset for malware detection. It has around 1150 malicious samples. The collection time for this dataset is 2011.  In its additional version [65] this dataset consisted of about 24553 malicious samples. These samples were grouped into 135 categories related to the malicious family. The collection period of these samples where from 2010 till 2016.   Another dataset related to malware detection is available, called as Android PRAGuard dataset [66].  The total malicious sample is 10479, which were collected in the year 2015. Similarly, the Marvin dataset [16] is also available for malware detection. It is a mixed dataset consisting of both malicious and benign files together. It has 10572 malicious samples and 75996 benign samples. The collection time is in the year 2015.  Another available dataset is ISCX Android Botnet Dataset [67]. It consists of 1929 malicious samples. These samples are categorized into 14 different categories. The collection time is from 2010 till 2014. The 

Summary of the above discussed datasets is as shown in Tab. 6.  4. Methodologies The technical details related to different machine learning techniques with the equations and the details related to the equation for SVM, ANN, and CNN. 4.1 Decision tree A Decision Tree is a tree-based classification in structure wherein each vertex of the tree is considered as an attribute, and the corresponding branch gives the value of that attribute [53]. The root is the topmost vertex of the tree, which stores the most important information. The difference in the entropy is stored on the root of the tree. This root stores the critical feature which is used for splitting the training data in the most optimal way. The bottom nodes of the tree are known as leaves, as shown in Fig. 2. The classes are represented as the leaves at the bottom of the tree. The process of classification is traversing the decision tree from top to bottom of the tree by satisfying the instance needed to classify. The equation of information gain used in a DT to optimally split instances in a tree-structured manner is given below.   Here, Gain(P,Q) is the reduction in entropy in order to sort P on attribute Q as in equation 1. Features with increasing information gain value are chosen as nodes in a top-down manner.                              Figure 2. Decision tree architecture 4.2 Support vector machine In cybersecurity, SVM is considered as the most popular classification algorithm. It is a supervised learning algorithm. The ultimate goal of applying this algorithm is to separate the hyperplane in the feature space among different classes [69]. The hyperplane is the main constraint in getting optimized 

Results. In this technique, the hyperplane is chosen based on the distance between the hyperplanes, which should be maximum for the closest data points. As shown in 263 International Journal of Communication Networks and Information Security (IJCNIS)                                        Vol. 13, No. 2, August 2021  the Fig. 3. The following are the parameters b, w, x as in equation 2. Where b is the hyperplane and w is the weight and x is the data points. As shown in the equation points (x1, y1), (x2, y2),: : : ,(xn, yn). Here x is an element of real values R and y = (1, 1) aslabels.  The ultimate target of SVM is to precisely classify the training data where y = + 1 using wxi + b ≥ 1 and when y = - 1 using wxi + b ≤ 1. So, for all i, yi(wxi + b) ≥ 1 using the distance measure performed by the following:                                                   (2)  The most important advantage of SVM is it ability to classify the data more accurately and the simplicity in implementation when compared with other classification algorithms. The accuracy is very good when the number of features (m) are higher than the number of samples (n) in the dataset. These numbers could be represented as m >>n. SVM is very much utilized in cybersecurity and also in other fields of research like healthcare, biology, and pattern recognition.      Figure 3. SVM architecture  Further to the advantages of SVM it can create better hyperplanes with the time complexity of O(N2)[70]. The comparison between all these techniques are listed in Tab. 7. 4.3 Artificial neural network Artificial neural network (ANNs) are a collection of nodes. The neurons of the brain simulate these nodes. ANN is a combination of three basic layers, which are named input, hidden and output layers. The hidden layer can be changed and increased to more than one layer, depending on the design of the algorithm. The sequence of operation is as follows: initially, the input layer transfers its output to the hidden layer, and accordingly, each subsequent layer passes it output to the next layer, and ultimately the final output is passed to the output layer, and this is the 

Results of the classification as shown in Fig. 4. Before SVM was invented during the 1990s ANN was very popular at that time, but further to the enhancement of ANN with feed-forward and convolutional neural network, again, ANN gained its popularity. ANN is very much utilized in the cybersecurity field.  The learning process is the main phase in any machine learning algorithm so in ANN also, this process takes inputs (x1, x2,: : :, xn)  with a given output label as y. Then weight vectors (w1,w2, : :,wn) are used to weight the input vectors. The weights play an important role in the learning process, as these are adjusted in such a way that the learning error is minimized E = ∑_(i=1)^n▒〖ld_i-y_i l〗, where the error is defined as the difference between the actual output (yi) of the neuron and the output which is desired (di). The adjustment of the weights is made by gradient algorithm, which follows back-propagation 



Methodology, wherein the learning process is repeated backward and forward directions and the error is followed, this process is done until the error shows lower than the stipulated threshold value. The adjustment of the weights is made based on the following equation   (3) ∆w_(i,j)= ηδjxi.j, i is the input node, and j is the hidden node. The parameters are shown in equation 3.       Figure 4. Artificial Neural Network architecture  4.4 Convolution neural network  Deep Learning is a subclass of Machine Learning, it is basically applied to handle applications with large training datasets. The process followed by DL is hierarchical in nature which is based on feature 



Abstraction and feature representation. In the contrary, traditional ML algorithms performance gets degraded when the training dataset is very large and because of the dimensionality of the data. Hence, to resolve this issue of data size, DL algorithms are applied, which usually use graphical processing units (GPUs) for processing the big data. Convolution neural network is the most applied algorithm among DL algorithms, especially to handle cybersecurity applications.   CNN is composed of two main layers: Convolution layer and the Pooling layer. The main functionality of convolution layer is to convolute the input data. This convolution is done with the assistance of numerous similar-size kernels. The outcome of this convolution is the retrieval of features from the input data. These features are the outcome of applying high value to a given position if the desired feature is available at that position and location and also in the reverse form [71].  The following are the main parameters in calculating the optimized features: m for kernel width and height, h is the output for the convolution, x represents the input, and finally, w is the convolution kernel as shown in the eq 4.      The next layer in CNN is the pooling layer, it is used to down-sample the feature sizes. It is done by applying two types of pooling techniques one if max-pooling and the other is average pooling. Max-pooling selects the value which is maximum among the values retrieved from the previous layer. The average pooling takes the average values of the last layer values. The pooling mechanism is applied to get the maximum and average deals from the previous layers which is under the kernel value [71]. Mathematically as in equation 5:           (5)  Apart from the above-mentioned layers, CNN has activation functions also. The most commonly used activation function is rectified linear unit. This activation function is represented 264 International Journal of Communication Networks and Information Security (IJCNIS)                                        Vol. 13, No. 2, August 2021  by the equation f (x) = max(0, a). A typical CNN architecture is as shown in the below Fig.  5. CNN has many advantages over other algorithms except computational cost, which is a disadvantage of CNN  5. Open challenges and future research directions Cybersecurity is a hot research topic although lot of work has been done in the past. But, still there are many open challenges available and need to be addressed. In this 



Section few of them are highlighted and future directions are listed to help a potential researcher to focus on these issues and adopt these directions. In Tab. 8 all the open challenges and future directions are listed.  5.1 Performance evaluation framework The evaluation metric used to calculate the performance of the cybersecurity technique and accuracy of the proposed 



Methodology needs standardizations. There needs robust evaluation metrics. Since the recently proposed evaluation metric does not cover all the aspects of cybersecurity especially with different domains. This is making it difficult to compare the proposed 



Methodology with system of different domain. The challenge is to develop the best way to evaluate the proposed method and compare it with state-of-the-art techniques. A universal evaluation method is needed to check the robustness and performance of the proposed technique under different 



Scenarios.  The research community needs such evaluation techniques that could confirm the robustness and performance capability of the current and future methodologies among different 



Scenarios and domains. The following are the three research directions were researchers can explore further to overcome this challenge: Developing tools and protocols and checking them with the attack and without attacks and see the performance, Listing the common criteria for efficient performance and document them, establishing open online platform for other researchers to suggest their methodologies and let them participate in this cause.   5.2 Generalization Generalization concerning the proposed techniques is another challenge. In this, the proposed 



Methodology doesn’t perform well under different circumstances like failing with novel samples, attacks, and dataset contents. These models are trained on specific training data, which is tuned, and the model is proposed, which fails to counter any change in the testing data if any real issues come like novel malware samples. The performance of the model degrades at some points, which is a big challenge and needs a solution.  Additionally, the proposed cybersecurity model for ransomware attacks would fail if tested for spyware-related attacks.  Cybersecurity models proposed are usually trained on known threats, which if tested on actual samples, would fail to perform. Since the nature of the attack is not predicted, it is now a challenge for researchers to counter this issue.  The following are the research direction which would help the researcher in exploring their research in this direction: Exploring a wide range of attacks and developing models based on this study and proposing mathematical security models which are capable to handle these attacks efficiently.    5.3 Design of Security The traditional systems proposed for cybersecurity systems which start with data collections till the classification followed by feature extraction, should be rechecked with the consideration of adversaries. For example, the features extracted should be not only generalized but also capable of handling the vulnerabilities to attacks. The solution to this challenge would be updating the system occasionally by adding the latest features relevant to the attack. These features should be able to solve the computational complexity issues and be faster and automated.  5.4 Advanced machine learning Traditional machine learning techniques applied for cybersecurity issues with systems built on modeling non-linear adversary behavior and not trustworthy features lead to over-fitting and degrading performance and reliability. This is a challenge and needs attention from researchers. To overcome this crisis, Advanced Machine Learning (AML) needs to be developed. Currently, a minimal amount of work has been done on AML like recognition of features, dictionary learning and DL for cybersecurity. The future scope of AML is to explore robust feature extraction techniques for different datasets. 5.5 Robustness of security with DL Although DNN systems give high accuracy for predicting malware attacks and other security tasks, recent studies have shown these techniques to be vulnerable for inputs with subtle perturbation. These adversarial examples are acting as real threats to DL techniques and need a proper solution. The scientific reason for this issue is studied by few researchers who say that the linear nature of the DNN-classifier is the primary source of the problem. The solution is to develop more robust DNN models, and there is a vast scope in creating these kinds of models which can handle adversarial issues more efficiently.   5.6 Privacy preserving in cybersecurity In recent research, it is evident that ML and DL-based cybersecurity systems have proved to be very efficient in classifying malware. But, on the other hand, these techniques could not handle the privacy issues related to datasets as the privacy of the datasets used in the systems is getting leaked and no proper 



Methodology is available to address this issue. If any advanced techniques are applied to save the leakage of private data, then the accuracy is getting affected. Therefore, more research is needing to keep the privacy-preserving issue and not affecting the accuracy of the proposed method.   5.7 Encyclopedic datasets  Cybersecurity is heavily dependent on real datasets. There are few existing datasets for cybersecurity, but they lack in big sizes and rich features like fully labelled, structured and complete with diversity and details about the attacks, their domains, and usage capabilities that should resemble the actual data. The following are the biggest hurdling in creating such datasets: high reliability, difficulty creating accurate and true labels, and access to applications in natural environments. These things needed to be taken care to develop a more robust dataset to handle real cybersecurity issues.    265 International Journal of Communication Networks and Information Security (IJCNIS)                                        Vol. 13, No. 2, August 2021   5.8 Interdisciplinary research Cybersecurity technologies should be merged with different technologies and make it a multidisciplinary field of research: there and many advantages in doing so. Cybersecurity research along with fundamental research, including a significant contribution from computer science, ML, and psychology, should be done together. These multidisciplinary modes of research would enhance the quality by increasing the reliability and development of efficient methods against numerous security threats and attacks.”  6. 



Conclusions and 



Future Work Cybersecurity is a real research topic wherein real problems are encounters that reflect directly to common people and some government authorities. Malware is threats for mobile users wherein critical and sensitive information is shared and downloaded. So, the attackers are targeting mobile devices in the form of malware attacks. Researchers in the current time are developing the latest techniques to detect this malware. In this context, this paper gives and detailed information about the latest techniques and their outcome. Machine learning techniques are now implemented almost all the fields as it is showing promising 

Results. So, in this paper, machine learning techniques that are applied to detect malware are discussed. The datasets on which the experimentation is conducted are discussed and listed to help future researchers. The traditional machine learning techniques like Decision tree, Support vector machine are discussed with the feature extraction techniques and their details, followed by the latest convolution neural network techniques. Finally, a list of open challenges is discussed, and future directions are suggested to help a potential researcher to follow.  In this work, various machine learning techniques are discussed, which were implemented for detecting malware attacks. But, some of the methods which are discussed here did not disclose the 

Results, and some of the techniques do not discuss the features, and some of them do not show the actual dataset used for the experimentation. As some of the discussed technique lack few important information. In the future, this information could be explored further to draft a complete report about the available datasets and their details of acquisitions, and complete information about feature extraction techniques in a systematic format and then categized based on the similarity of extraction and feature details. Then machine learning techniques could be explored more for recent updates and possible extra information for the readers to get the most recent information. 7. Acknowledgement The author would like to thank SAUDI ARAMCO Cybersecurity Chair for funding this project. 



References [1] M. Daraghmeh, I. Al Ridhawi, M. Aloqaily, Y. Jararweh and A. Agarwal, “A power management approach to reduce energy consumption for edge computing servers,” in Proc. FMEC, Rome, Italy, pp. 259–264, 2019. [2] F. A. Turjman, H. Zahmatkesh and L. Mostarda, “Quantifying uncertainty in internet of medical things and big-data services using intelligence and deep learning,” IEEE Access, vol. 7, pp. 115749–115759, 2019. [3] M. N. Alenezi, H. Alabdulrazzaq, A. A. Alshaher, and M. M. Alkharang. "Evolution of Malware Threats and Techniques: A Review," International Journal of Communication Networks and Information Security, vol. 12, no. 3, pp. 326-337, 2020. [4] M. Nassiri, H. HaddadPajouh, A. Dehghantanha, H. Karimipour, R. M. Parizi and G. Srivastava, “Malware elimination impact on dynamic analysis: An experimental machine learning approach,” in Handbook of Big Data Privacy, Springer, pp. 359–370, 2020. [5] B. D. Deebak, F. A. Turjman, M. Aloqaily and O. Alfandi, “An authentic-based privacy preservation protocol for smart e-healthcare systems in IoT,” IEEE Access, vol. 7, pp. 135632–135649, 2019. [6] Z. Lv, W. Mazurczyk, S. Wendzel and H. Song, “Guest Editorial: Recent Advances in Cyber-Physical Security in Industrial Environments,” IEEE Transactions on Industrial Informatics, vol. 15, no. 12, pp. 6468–6471, 2019. [7] “Juniper, ‘Juniper Networks 2011 Mobile Threats Report,’ Juniper Networks Mobile Threat Center (MTC), 2012.” [8] I. Martin, J. A. Hernández and S. de los Santos, “Machine-Learning based analysis and classification of Android malware signatures,” Future Generation Computer Systems, vol. 97, no. 1, pp. 295–305, 2019. [9] K. Xu, Y. Li, R. H. Deng and K. Chen, “Deeprefiner: Multi-layer android malware detection system applying deep neural networks,” in Proc. EuroS&P, London, U.K, pp. 473–487, 2018. [10] M. Amin, T. A. Tanveer, M. Tehseen, M. Khan, F. A. Khan et al., “Static malware detection and attribution in android byte-code through an end-to-end deep system,” Future Generation Computer Systems, vol. 102, no. 3, pp. 112–126, 2020. [11] W. Wang, X. Wang, D. Feng, J. Liu, Z. Han and X. Zhang, “Exploring permission-induced risk in android applications for malicious application detection,” IEEE Transactions on Information Forensics and Security, vol. 9, no. 11, pp. 1869–1882, 2014. [12] P. Faruki, V. Ganmoor, V. Laxmi, M. S. Gaur and A. Bharmal, “AndroSimilar: robust statistical feature signature for Android malware detection,” in Proc. SIN, Aksaray Turkey, pp. 152–159, 2013. [13] M. Y. Wong and D. Lie, “IntelliDroid: A Targeted Input Generator for the Dynamic Analysis of Android Malware.,” in Proc. NDSS, San Diego, California, USA, pp. 21–24, 2016. [14] H. Cai, N. Meng, B. Ryder and D. Yao, “Droidcat: Effective android malware detection and categorization via app-level profiling,” IEEE Transactions on Information Forensics and Security, vol. 14, no. 6, pp. 1455–1470, 2018. [15] S. Chen, M. Xue, Z. Tang, L. Xu and H. Zhu, “Stormdroid: A streaminglized machine learning-based system for detecting android malware,” in Proc. ASIS CCS,  Xi'an China, pp. 377–388, 2016. [16] M. Lindorfer, M. Neugschwandtner and C. Platzer, “Marvin: Efficient and comprehensive mobile app classification through static and dynamic analysis,” in Proc. COMPSAC, Taichung, Taiwan, pp. 422–433, 2015.  [17] P. Vinod, A. Zemmari and M. Conti, “A machine learning based approach to detect malicious android apps using discriminant system calls,” Future Generation Computer Systems, vol. 94, no. 5, pp. 333–350, 2019. [18] D. Ucci, L. Aniello and R. Baldoni, “Survey of machine learning techniques for malware analysis,” Computers & Security, vol. 81, no. 6, pp. 123–147, 2019. [19] P. Feng, J. Ma, C. Sun, X. Xu and Y. Ma, “A novel dynamic Android malware detection system with ensemble learning,” IEEE Access, vol. 6, pp. 30996–31011, 2018. 266 International Journal of Communication Networks and Information Security (IJCNIS)                                        Vol. 13, No. 2, August 2021  [20] D. Kim, J. Kim and S. Kim, “A malicious application detection framework using automatic feature extraction tool on android market,” In Proc. ICCSIE, Xian, China, 2013. [21] I. Burguera, U. Zurutuza and S. Nadjm-Tehrani, “Crowdroid: behavior-based malware detection system for android,” in Proc. SPAM, Chicago Illinois USA, pp. 15–26, 2011.  [22] G. Dini, F. Martinelli, A. Saracino and D. Sgandurra, “MADAM: a multi-level anomaly detector for android malware,” in Proc. MMM-ACNS, St. Petersburg, Russia, pp. 240–253, 2012.  [23] A. Shabtai, U. Kanonov, Y. Elovici, C. Glezer and Y. Weiss, “‘Andromaly’: a behavioral malware detection framework for android devices,” Journal of Intelligent Information Systems, vol. 38, no. 1, pp. 161–190, 2012. [24] W. Z. Zarni Aung, “Permission-based android malware detection,” International Journal of Scientific & Technology Research, vol. 2, no. 3, pp. 228–234, 2013. [25] B. Sanjaa and E. Chuluun, “Malware detection using linear SVM,” in Ifost, vol. 2, pp. 136–138, 2013. [26] W. Li, J. Ge and G. Dai, “Detecting malware for android platform: An svm-based approach,” in Proc. CSCloud, New York, NY, USA, pp. 464–469, 2015. [27] D. Arp, M. Spreitzenbarth, M. Hubner, H. Gascon, K. Rieck and C. Siemens, “Drebin: Effective and explainable detection of android malware in your pocket.,” in Ndss, vol. 14, pp. 23–26, 2014. [28] A. Makandar and A. Patrot, “Malware analysis and classification using artificial neural network,” in Proc. I-TACT-15, Bangalore, India, pp. 1–6, 2015.  [29] Y. Fan, Y. Ye and L. Chen, “Malicious sequential pattern mining for automatic malware detection,” Expert Systems with Applications, vol. 52, pp. 16–25, 2016. [30] H. Fereidooni, M. Conti, D. Yao and A. Sperduti, “ANASTASIA: ANdroid mAlware detection using STatic analySIs of Applications,” in Proc. NTMS, Larnaca, Cyprus, pp. 1–5, 2016. [31] Y. Aafer, W. Du and H. Yin, “Droidapiminer: Mining api-level features for robust malware detection in android,” in Proc. ICST, Sydney, NSW, Australia, pp. 86–103, 2013.  [32] M. Zhang, Y. Duan, H. Yin and Z. Zhao, “Semantics-aware android malware classification using weighted contextual api dependency graphs,” in Proc. ACM SIGSAC, Scottsdale Arizona USA, pp. 1105–1116, 2014. [33] E. Mariconti, L. Onwuzurike, P. Andriotis, E. De Cristofaro, G. Ross and G. Stringhini, “Mamadroid: Detecting android malware by building markov chains of behavioral models,” arXiv Prepr. arXiv1612.04433, 2016. [34] D. J. Wu, C. H. Mao, T. E. Wei, H. M. Lee and K. P. Wu, “Droidmat: Android malware detection through manifest and api calls tracing,” in Proc. ASIAJCIS, Washington, D.C. USA, pp. 62–69, 2012. [35] J. Su, D. V. Vasconcellos, S. Prasad, D. Sgandurra, Y. Feng and K. Sakurai, “Lightweight classification of IoT malware based on image recognition,” in Proc. COMPSAC, Tokyo, Japan,  pp. 664–669, 2018.  [36] S. Yue, “Imbalanced malware images classification: a CNN based approach,” arXiv preprint arXiv:1708.08042, vol. 1708, pp. 1–5, 2017. [37] S. Poudyal, K. P. Subedi and D. Dasgupta, “A framework for analyzing ransomware using machine learning,” in Proc. IEEE SSCI, Bengaluru, India, pp. 1692–1699, 2018. [38] S. Poudyal, D. Dasgupta, Z. Akhtar and K. Gupta, “A multi-level ransomware detection framework using natural language processing and machine learning,” in Proc. MALCON, Fajardo, Puerto Rico, pp. 1-6, 2019. [39] S. Poudyal, Z. Akhtar, D. Dasgupta and K. D. Gupta, “Malware analytics: review of data mining, machine learning and big data perspectives,” in Proc. SSCI, Xiamen, China,  pp. 649–656, 2019.  [40] G. E. Dahl, J. W. Stokes, L. Deng and D. Yu, “Large-scale malware classification using random projections and neural networks,” in Proc. ICASSP, Vancouver, Canada, pp. 3422–3426, 2013. [41] J. Saxe and K. Berlin, “Deep neural network based malware detection using two dimensional binary program features,” in Proc. MALWARE, Fajardo, PR, USA, pp. 11–20, 2015.  [42] W. Huang and J. W. Stokes, “MtNet: a multi-task neural network for dynamic malware classification,” in Proc. DIMVA, Sebastian, Spain, pp. 399–418, 2016. [43] B. Cakir and E. Dogdu, “Malware classification using deep learning methods,” in Proc. ACMSE,    Kentucky, USA, pp. 1–5, 2018. [44] P. Zegzhda, D. Zegzhda, E. Pavlenko and G. Ignatev, “Applying deep learning techniques for Android malware detection,” in Proc. ICPS, Cardiff, U. K, pp. 1–8, 2018. [45] M. Ganesh, P. Pednekar, P. Prabhuswamy, D. S. Nair, Y. Park and H. Jeon, “CNN-based android malware detection,” in Proc. ICSSA, Altoona, PA, USA, pp. 60–65, 2017. [46] T. H. D. Huang and H. Y. Kao, “R2-d2: Color-inspired convolutional neural network (cnn)-based android malware detections,” in Proc. IEEE BigData, Seattle, USA, pp. 2633–2642, 2018. [47] L. Shiqi, T. Shengwei, Y. Long, Y. Jiong and S. Hua, “Android malicious code Classification using Deep Belief Network,” KSII Transactions on Internet & Information Systems, vol. 12, no. 1, 2018. [48] Y. S. Yen and H. M. Sun, “An Android mutation malware detection based on deep learning using visualization of importance from codes,” Microelectronics Reliability, vol. 93, pp. 109–114, 2019. [49] Z. Xu, K. Ren, S. Qin and F. Craciun, “CDGDroid: Android malware detection based on deep learning using CFG and DFG,” in Proc. ICFEM, Gold Coast, Australia, pp. 177–193, 2018. [50] A. Pektas and T. Acarman, “Deep learning for effective Android malware detection using API call graph embeddings,” Soft Computing, vol. 24, no. 2, pp. 1027–1043, 2020. [51] L. K. Yan and H. Yin, “Droidscope: Seamlessly reconstructing the {OS} and dalvik semantic views for dynamic android malware analysis,” in Proc. Security'12, Washington, USA, pp. 569–584, 2012. [52] R. Vinayakumar, M. Alazab, K. P. Soman, P. Poornachandran and S. Venkatraman, “Robust intelligent malware detection using deep learning,” IEEE Access, vol. 7, pp. 46717–46738, 2019. [53] E. B. Karbab, M. Debbabi, A. Derhab and D. Mouheb, “MalDozer: Automatic framework for android malware detection using deep learning,” Digital Investigation, vol. 24, pp. S48--S59, 2018. [54] M. K. Khan, M. Zakariah, H. Malik, and K. K. R. Choo. "A novel audio forensic data-set for digital multimedia forensics." Australian Journal of Forensic Sciences, vol. 50, no. 5, pp. 525-542, 2018. [55] “https://contagiominidump.blogspot.ca.” [56] T. Kim, B. Kang, M. Rho, S. Sezer and E. G. Im, “A multimodal deep learning method for android malware detection using various features,” IEEE Transactions on Information Forensics and Security, vol. 14, no. 3, pp. 773–788, 2018. [57] “VirusTotal. Accessed: Sep. 2017. [Online]. Available: https://www. virustotal.com/ko.” [58] “VirusShare. Accessed: Sep. 2017. [Online]. Available: https://virusshare. com.” [59] “Mal-Genome Project. Accessed: Sep. 2017. [Online]. Available: http:// www.Malgenomeproject.org.” [60] “Google Play Store. Accessed: Sep. 2017. [Online]. Available: https:// play.google.com/store.” 267 International Journal of Communication Networks and Information Security (IJCNIS)                                        Vol. 13, No. 2, August 2021  [61] M. K. Alzaylaee, S. Y. Yerima and S. Sezer, “DL-Droid: Deep learning based android malware detection using real devices,” Computers & Security, vol. 89, pp. 101663, 2020. [62] “McAfee Labs Threats Predictions Report | McAfee Labs.” [63] Y. Zhou and X. Jiang, “Dissecting android malware: Characterization and evolution,” in Proc. IEEE SP, San Francisco, USA, pp. 95–109, 2012. [64] Y. Li, J. Jang, X. Hu and X. Ou, “Android malware clustering through malicious payload mining,” in  Proc. RAID, Atlanta, GA, USA, pp. 192–214, 2017. [65] F. Wei, Y. Li, S. Roy, X. Ou and W. Zhou, “Deep ground truth analysis of current android malware,” in Proc. DIMVA, Bonn, Germany, pp. 252–276, 2017. [66] D. Maiorca, D. Ariu, I. Corona, M. Aresu and G. Giacinto, “Stealth attacks: An extended insight into the obfuscation effects on android malware,” Computers & Security, vol. 51, pp. 16–31, 2015. [67] A. F. A. Kadir, N. Stakhanova and A. A. Ghorbani, “Android botnets: What urls are telling us,” in Proc.  NSS, Xi’an, China, pp. 78–91, 2015. [68] L. Li et al., “Androzoo++: Collecting millions of android apps and their metadata for the research community,” arXiv Prepr. arXiv1709.05281, 2017. [69] T. Hastie, R. Tibshirani and J. Friedman, The elements of statistical learning: data mining, inference, and prediction. Springer Science & Business Media, 2009. [70] A. L. Buczak and E. Guven, “A survey of data mining and machine learning methods for cyber security intrusion detection,” IEEE Communications surveys & tutorials, vol. 18, no. 2, pp. 1153–1176, 2015. [71] “Ganegedara T. Intuitive guide to convolution neural networks. Towards data science. Available at: https://towards datascience.com/light-on-math-machine-learning-intuitiveguide-to-convolution-neural-networks-e3f054dd5daa (2020, accessed 28 July 2020).”                                                                                                           268 International Journal of Communication Networks and Information Security (IJCNIS)                                        Vol. 13, No. 2, August 2021  Table 1. Classical techniques for detecting malware  Table 2. Artificial neural network techniques for malware detection  Table 3. Convolution neural network techniques for malware detection  Table 4. Datasets for malware detecting the tasks Dataset No. of Malware No. of Benign Total Malgenome 1258 37627 38885 Drebin 5555 37627 43182 MalDozer 20089 37627 57716 All 33066 37627 70693  Table 5. Datasets for attributes of task  Dataset No. of Malware No. of Family Malgenome 985 9 Drebin 4661 20 MalDozer 20089 32  S. No Feature Techniques    

Results Ref 1.  .apk Android executable files J48 Decision Tree classification 82.7 % accuracy [20] 2.  ten genuine malware samples 1-Nearest Neighbor classifier 93% of accuracy [22] 3.  88 features with unrooted device k-Means, Logistic Regression, Histograms, Decision Tree, Bayesian Networks and Naive Bayes 80% of accuracy [23] 4.  500 Android .apk files Random Forest, J48 Decision Tree, and Classification and Regression Tree (CART) NA [24] 5.  NA SVM algorithm 74-83% of accuracy [25] S. No Feature Dataset Techniques 

Results Ref 1.  Malware is converted into one-channel gray-scale image NA CNN 94.0%    [35] 2.  word2vec technique NA gradient boosting algorithm 96%      [43] 3.  API call sequence into RGB images 7192 benign and 24461 malicious samples CNN 93%     [44] 4.  static method to extract the features 2000 malicious and 500 benign samples CNN 93%     [45] 5.  converted the .dex files into RGB color codes 2 million benign and malicious Android application CNN 98.4225%     [46] S. No Feature Dataset Techniques 

Results Ref 1.  Global wavelet transforms Mahenur Artificial Neural Network 96.35%       [28] 2.  Instruction sequence 8847 malicious files and 1460 benign files All-Nearest-Neighbor (ANN) classifier 97.3%      [29] 3.  Package-level API calls         NA Artificial Neural Network 99% of the accuracy      [31] 4.  Semantic features NA Artificial Neural Network capable of effectively fighting against malware      [32] 5.  Markov chain NA Artificial Neural Network classify and detect the malware      [33] 269 International Journal of Communication Networks and Information Security (IJCNIS)                                        Vol. 13, No. 2, August 2021  Table 6. Different datasets available                        Table 7. Comparison of different techniques                     S. No Dataset Year Benign ware Malware Ref 1.  Android Malware Genome Project 2010 863 1260 [63] 2.  DREBIN 2010 123453 5560 [27] 3.  Contagio 2011 - 1150  4.  Android Malware Dataset 2010 - 24553 [64] [15] 5.  VirusShare 2016 - 65536 [7] 6.  Android PRA Gaurd Dataset 2015 - 10479 [16] 7.  Marvin 2015 50501 7406 [17] 8.  ISCX Android Botnet 2014 - 1929 [18] 9.  Andro Zoo 2018 25000 - [68] Methods Domain Advantages Disadvantages DT A rule-based tree-structured classification model trained based on information gain of all features in training data Computational cost is less and easy to implement. We need to save all the information of the trained model. Space complexity is high. SVM It aims to find separating hyperplane in the feature space among its classes so that distance between the hyperplane and its nearest data Suitable for small sample size but large feature dimensions Selecting optimal kernel size (k-value) is difficult ANN It consists of one or more hidden layers between the input and output layer. Stores input data information as weights in the hidden layer using the backpropagation algorithm Suitable for pattern recognition problem with high accuracy Computational complexity is high compared to other algorithms  CNN The convolution layer of CNN extracts features from training data in a generative fashion using several hidden layers and a pooling layer that pulls that information to predict output Very useful for image classification and pattern recognition Computationally complex. Performance degrades with low sample size 270 International Journal of Communication Networks and Information Security (IJCNIS)                                        Vol. 13, No. 2, August 2021  Table 8. Future directions and open challenges   Figure 5. Convolution Neural Network                       S. No Domain Open Challenges Future Directions and 



Recommendations 1.  Evaluating the performance  Traditional performance metrics are failing for new attacks, domains and environments • Developing new tools. • Listing the commo criteria. • Establishing open online system for new researchers to contribute in this cause. 2.  Designing the Security Cybersecurity techniques proposed are failing to handle new threats and degrading the performance when tested with different kind of threats  • Exploring wide range of attacks. • Proposing mathematical security models 3.  Machine learning techniques and its advancements Traditional ML techniques are failing since the attackers are fooling the models and making it to overfit.   • Develop Advanced Machine Learning techniques with the capability of robust feature extraction techniques and handling overfitting issue 4.  Deep learning model’s robustness The linear nature of DNN-classifier is the main source of the issue. • Develop more robust DNN models 5.  Preserving the privacy aspects These techniques could not handle the privacy issued related to datasets as the privacy of the datasets used in the systems are getting leaks • More research is needing to save the privacy-preserving issue and not effecting the accuracy of the proposed method 6.  Dataset issues They are lacking in big sizes and also with rich features like fully labelled, structured and complete with diversity and details about the attacks, its domains • Develop more robust dataset to handle real cybersecurity issues.    




Machine-Learning Classifiers for Malware Detection Using Data Features (2021) by Dahah, Ahmed Haidarah Hasan, Habtor, Saleh Abdulaziz
Abstract:
The spread of ransomware has risen exponentially over the past decade, causing huge financial damage to multiple organizations. Various anti-ransomware firms have suggested methods for preventing malware threats. The growing pace, scale and sophistication of malware provide the anti-malware industry with more challenges. Recent literature indicates that academics and anti-virus organizations have begun to use artificial learning as well as fundamental modeling techniques for the research and identification of malware. Orthodox signature-based anti-virus programs struggle to identify unfamiliar malware and track new forms of malware. In this study, a malware evaluation framework focused on machine learning was adopted that consists of several modules: dataset compiling in two separate classes (malicious and benign software), file disassembly, data processing, decision making, and updated malware identification. The data processing module uses grey images, functions for importing and Opcode n-gram to remove malware functionality. The decision making module detects malware and recognizes suspected malware. Different classifiers were considered in the research methodology for the detection and classification of malware. Its effectiveness was validated on the basis of the accuracy of the complete process

FullText:
               J. ICT Res. Appl., Vol. 15, No. 3, 2021, 265-290               265          Received February 7th, 2021, 1st Revision May 18th, 2021, 2nd Revision September 8th, 2021, Accepted for publication October 29th, 2021. Copyright © 2021 Published by IRCS-ITB, ISSN: 2337-5787, DOI: 10.5614/itbj.ict.res.appl.2021.15.3.5  Machine-Learning Classifiers for Malware Detection Using Data Features Saleh Abdulaziz Habtor* & Ahmed Haidarah Hasan Dahah Faculty of Computer Science and Information Technology, Universiti Putra Malaysia, 43400, UPM Serdang, Selangor, Malaysia  *E-mail: sas.habtoor@gmail.com   



Abstract. The spread of ransomware has risen exponentially over the past decade, causing huge financial damage to multiple organizations. Various anti-ransomware firms have suggested methods for preventing malware threats. The growing pace, scale and sophistication of malware provide the anti-malware industry with more challenges. Recent literature indicates that academics and anti-virus organizations have begun to use artificial learning as well as fundamental modeling techniques for the research and identification of malware. Orthodox signature-based anti-virus programs struggle to identify unfamiliar malware and track new forms of malware. In this study, a malware evaluation framework focused on machine learning was adopted that consists of several modules: dataset compiling in two separate classes (malicious and benign software), file disassembly, data processing, decision making, and updated malware identification. The data processing module uses grey images, functions for importing and Opcode n-gram to remove malware functionality. The decision making module detects malware and recognizes suspected malware. Different classifiers were considered in the research 



Methodology for the detection and classification of malware. Its effectiveness was validated on the basis of the accuracy of the complete process. 



Keywords: artificial intelligence; cyber-attacks; machine learning; malware, ransomware. 1 



Introduction Malware is defined as intrusive software that penetrates or destroys a system without permission of the user. Malware is a common concept that threatens all sorts of devices. A basic malware distinction is between file infectors and individual malware. According to the specific behavior malware items can be classified into adware, viruses, trojans, spyware, rootkits, etc. The process of malware detection through traditional signature-based methods (Santos, et al. [1]) is very problematic because all older and new malware programs have polymorphic layers to avoid detection; the use of lateral mechanisms assists in developing new malware versions in a shorter time in order to avoid antivirus detection. For malware identification through dynamic file review in a virtual 266    Saleh Abdulaziz Habtor & Ahmed Haidarah Hasan Dahah  world, the interested reader is referred to Rieck et al. [2]. The classical methods for detecting metamorphic viruses are discussed in Konstantinou, et al. [3]. Cyber threats become possible when criminals use malware as a primary weapon in their operations. Therefore, one information protection issue is to detect ransomware in time so that it can be blocked to prevent the attackers from accomplishing their goals, or at least delay them long enough to stop them.Various detection methods, such as regulatory or signature-based methods, enable the analyst to apply rules manually based on specific data to identify and automatically describe harmful or sensitive data to the specifications of the detection model. The automated generation of signatures is a middle ground between these two methods. To date, manual and automated rules and signatures have been used in the information security field using machine learning and mathematical techniques due to the low false positive rates they can achieve.  In recent years, however, three advances have strengthened the potential for progress in machine-based learning techniques, suggesting that these strategies will attain high detection rates at low false positive rates without the pressure of producing manual signatures. The first such trend is the rise of commercial threat intelligence feeds that offer large quantities of new malware, which means that the safety community has access to labeled malware for the first time. The second trend is that processing power has become cheaper, so researchers can travel more easily around learning models in malware detection systems and fit larger and more complex models to the 

Results. Thirdly, machine learning has developed as a discipline, which means that researchers have more resources for effective detection models that can achieve both accuracy and scalability breakthroughs. 1.1 Motivation of the Study Malware (such as viruses, trojans, ransomware, and bots) pose substantial emerging security risks to Internet users. Anti-malware security services from a variety of firms, including Comodo, Kaspersky, Kingsoft, and Symantec, offer primary protection against malware. To keep up with the growing number of malware items, intelligent methods for accurate and reliable malware identification from large everyday sample collections are urgently needed. This research first provides a brief 



Introduction about malware, types of malware and the need for malware detection using machine-learning techniques. In these methods, the process of detection is usually divided into two stages: feature extraction and classification. The result is subjected to malware detection by five different classifiers that are used in the decision making process and among those the best output is selected.            Machine Learning Classifiers for Malware Detection 267  1.2 Malware Malware is software that is used or designed to interrupt network processes, capture personal information, or control private computer systems. It can be found in JavaScript, scripts, active content, and applications. Malware is commonly used as a term to refer to several types of software that is offensive, disruptive, or irritating.  Malware Use:  1. Many early infectious programs were written as experiments or pranks, including the first Internet worm.  2. Today, malware is mostly used to capture confidential information for the benefit of others, including personal, financial and business information.  3. Malware is often used extensively to capture or destroy secured information from government or business websites.  4. Malware, however, is also used to obtain personal data such as credit card numbers, social security numbers, bank accounts etc. 1.3 Types of Malware It is helpful to define malware and provide a clear understanding of the techniques and reasoning behind it. Depending on its intent, malware can be classified into several groups. The classes are the following:  1. Bugs – This is the most simple software type. It is a single piece of software that starts excepting permission of the user when it is replicated, or other software is corrupted/modified (Horton [4]).  2. Worms – This form of malware is pretty much like a virus, but a worm will spread to other devices across a network (Smith [5]).  3. Trojans – This term is used to describe types of malware that are meant to function as legitimate applications. Moffie, et al. [6] explain that social engineering is the general spreading vector used in this field, which implies that people believe they are installing a legitimate application. 4. Adware – The aim of this sort of malware is to display ads on a system. Adware is considered as a subset of spyware but is unlikely to lead to spectacular outcomes. 5. Spyware – As the name suggests, this is malware that enables hacking. Typical spyware actions include monitoring of the user history to send targeted ads and follow behaviors to market them to mediators (Chien, et al. [7]).  6. Rootkit – Its interface allows intruders higher authorization to access data on a system than is permissible. This may be used for example to provide illegal administrative user permission. Rootkits often mask their presence and are 268    Saleh Abdulaziz Habtor & Ahmed Haidarah Hasan Dahah  often unnoticeable on the device, rendering the identification and removal exceedingly difficult (Chuvakin, et al. [8]).  7. Backdoor – This is a form of malware that allows attackers to access a device in an additional hidden fashion. It is not dangerous on its own but offers more room for attackers. As a result, backdoors are seldom used autonomously, they typically precede other forms of malware attacks.  8. Keylogger – This malware is used to record all keys that are pressed by the user and store sensitive information such as card numbers and passwords (Chumachenk,o et al. [9]).  9. Malware – This malware is intended to encipher all data on a device and force the target to send cash to obtain the decipher key. A ransom compromised system is normally ‘frozen’, so the user is unable to access any file. A screen image is used to supply data about the requests of the attacker (Savage, et al. [10]). 10. Remote Control Software (RAT) – A RAT helps the intruders to enter a device and make changes to it as if they have physical access. It can be built-in but used with malicious motives, like in the example of TeamViewer.  Figure 1 Top 10 Windows malware [30]. 2 Methods of Detection Malware identification approaches can be categorized into signatures-based and behavior-based strategies. It is crucial to consider the fundamentals of two malware analysis approaches before moving to the 



Discussion of these methods: static analysis of malware, and dynamic analysis of malware. Static analysis takes 051015202530           Machine Learning Classifiers for Malware Detection 269  place ‘statically’, i.e. without processing any files. In contrast, dynamic file processing is carried out on a virtual machine.  Static research is interpreted as ‘reading’ the source code of malware and attempting to deduce behavioral features from the code. Various strategies can be used in static analyses (Prasad, Annangi & Pendyala [11]):  1. File format inspection: The file metadata can be helpful. For example Windows PE files contain information about time to compile, imported and exported functions, etc.  2. String extraction: This means program output inspection (for example, status or error messages) and the inference of malware process information.  3. Fingerprinting: This involves the calculation of the cryptographic hash, the identification of environmental items, including hard-coded usernames, passwords or strings in the registry.  4. AV scanning: If the examined file is known ransomware, it can possibly be found by all anti-virus scanners available. While this identification can seem insignificant, AV vendors or sandboxes use this identification tool to ‘confirm’ their 

Results.  5. Disassembly: This involves the reverse of the program code to combine the language and structure and purpose of applications. This is the most widely used and accurate static analysis method.  6. Dynamic and static analysis: in contrast to static analysis, in dynamic analysis the file under investigation is tracked during execution and the features and purposes of the file are derived from these details. The file is normally run in a simulated environment, such as a sandbox. All behavioral characteristics such as opened directories, generated mutexes, etc. can be found during this method of analysis. It is also easier compared to static analysis. Static analysis only reveals the behavioral situation that is applicable to the present device characteristics. If a virtual machine is built under Windows 7, then the 

Results may vary from those of Windows 8.1 malware (Egele, et al. [12]).  One form of static analysis is called signature-based analysis and is based on pre-defined signatures, which may be fingerprints, static strings, SHA1 or MD5 hash, or metadata tabs. The identification condition will be the following: when a file appears on a device, the anti-virus program analyzes it statically. If one of the signatures matches, an alarm is activated such as ‘This file is suspect’. Most frequently this analysis method is appropriate and familiar malware samples are also found based on hash values. 270    Saleh Abdulaziz Habtor & Ahmed Haidarah Hasan Dahah  2.1 The Need for Machine Learning In the past decade, the study and the use of machine-learning tools have expanded to solving tasks of malware identification and classification. Fig. 2 depicts the machine-learning workflow of malware detection. Without the confluence of three recent innovations, the progress and convergence of machine-learning methods would not have been possible:  1. The first change is a spike in malware feeds, which means that for the first time branded malware is not only available in the defense area but also in the testing area. The size of this feed varies from small top-quality specimens, such as those provided by Microsoft [13], to vast quantities of malware, such as Zoo [14] and Chu [15].  2. Secondly, computing technology has grown exponentially and has become affordable and closer to the budgets of most researchers at the same time. As a result, researchers have improved the methods of iterative training and applied bigger and more complicated models and 

Results.  3. Thirdly, the field of machine learning has advanced more quickly over recent decades, taking the precision and scalability of a variety of tasks such as device perception, natural language processing and speech recognition to new levels.  Signature-based malware detectors can do well with malware that has previously been detected by many anti-virus vendors. However, they cannot detect polymorphic malware that can modify its signatures or new malware, for which no signatures have been created yet. The sensitivity of heuristic detectors is not always sufficient to identify these correctly, resulting in numerous false positives and false negatives (Baskaran, et al. [16]).  The high distribution rate of polymorphic viruses dictates the need for modern detection methods. One solution to this problem is to focus on heuristic analysis combined with machine learning approaches that provide better detection 

Results (Figure 2).  Figure 2 Machine learning workflow.            Machine Learning Classifiers for Malware Detection 271  When using a heuristic process, there must be a certain level of malware activity, which determines the number of heuristics necessary to identify a program as malicious. For instance, a variety of suspicious operations such as ‘changed registry key’, ‘link created’, ‘changed permit’, etc., may be identified. It would also assume that every program that causes at least five of such operations may be considered malicious. While this strategy gives some degree of reliability, it is not necessarily valid, since there are features that may have extra ‘weight’ compared to others, for example, ‘modified allowances’ usually has more drastic effects on a device than ‘adjusted registry key’. In comparison, certain combinations of features may be more questionable than the features separately (Rieck, et al. [17]). 3 Related Work In 2001, Schultz, et al. [18] launched machine learning for finding new, static-based malware, byte n-grams on program executables, and strings for functionality extraction writers. In 2007, Bilar [19] released Opcode, a malware finder to investigate the distribution of opcode frequency in non-malicious and malicious scripts. In 2007, Elovici, et al. [20] used Feature Range and Decision Tree (5 grams, top 300, FS), Bayesian Network (5 grams), Artificial Neural Network (5 grams, top 300, FS), Decision Tree (using the PE), BN (using the PE) and accuracy of 95.8 percent. In 2008, Moskovitch, et al. [21] used philtres for the collection of functions. For the collection and classification of functions and Decision Tree (DT), Naïve Bayes (NB), and Adaboost, Neural Support Networks (ANN). The assistance of support vector machine (SVM) and M1 (DT and NB boosted) using Fisher score and gain ratio (GR) had an accuracy of 94.9%.  Again, Moskovitch, et al. [22] used the n-gram (2,3,4,5,6 grams) of opcodes as standard and used the collection of document frequency (DF), GR and FS features in 2008. They used the ANN, DT, Boosted DT, NB and Boosted NB classification algorithms, which were outperformed by ANN, DT, BDT in retaining a low false positive score.  Santos, et al. [23] concluded in 2011 that supervised learning includes labeling data so that semi-controlled learning was introduced to recognize unknown malware. In 2011, the frequency of operating codes was again provided by Santos, et al. [24]. They used the function selection approach and various classifiers, i.e. DT, K-Closest Neighbors (KNN, Bayesian Network), Support Vector Machine (SVM) with an opcode sequence length of 92.92% and an opcode sequence length of 95.90%. Shabtai, et al. used n-gram opcode pattern features in 2012 to define the best available tool for document frequency (DF), G-mean and Fisher ranking. They used several classifiers in their method, with Random Forest exceeding 95.146% accuracy (Shabtai, et al. [25]).  272    Saleh Abdulaziz Habtor & Ahmed Haidarah Hasan Dahah  In 2016, Ashu, et al. [26] proposed a new method for high-precision detection of unknown malware. They studied the frequency of opcodes and put them together. The authors tested thirteen classifiers, from which FT, J48, NBT, and Random Forest were included in the WEKA machine learning stage, and obtained over 96.28% accuracy for malware. In 2016, Sahay, et al. [27] using the Optimal K Means Clustering algorithm, clustered malware executables and these groups were used by classifiers to identify unknown malware as promising training features (FT, J48, NBT, and Random Forest). They found that the identification by the proposed solution of unknown malware had 99.11% accuracy.  Some scholars have recently been working on a new malware dataset for Kaggle [28]. In 2016, Ahmadi, et al. [29] collected Microsoft malware data and hex dump-based characteristics used (string length, metadata, entropy, n-gram, and image depiction) and also characteristics derived from unmounted files and the classification algorithms of XGBoost (metadata, icon duration, opcodes, registries, etc.). They achieved an accuracy of ~99.8%. For the 2017 classification of polymorphic malware, Drew, et al. [30] employed the Super Threaded Reference Free Alignment-Free N-sequence Decoder (STRAND) classifier. They introduced an ASM sequence model and achieved a precision of more than 98.59% with a 10-fold cross-validation approach. In Souri, et al. [31], a number of malware detection techniques are presented in two categories: 1. signature-based methods, and  2. behavior-based methods. The survey, however, did not include either a study of the current deep learning methods or the types of features used for malware detection and classification in data-mining techniques. Ucci, et al. [32] categorized the methods according to:  a. What is the objective problem they are trying to solve? b. What are the types of characteristics taken from portable executable files (PEs), and  c. Which machine learning algorithms they use. Although the research provides a full 

Overview of the taxonomy of functions, new research trends, notably multimodal and deep learning approaches, are not outlined.  Ye, et al. [33] cover common malware-detection machine-learning methods, consisting of the discovery, compilation and classification of items. However, core features like entropy or structural entropy and certain complex characteristics such as network operation, opcodes and API tracks are absent. In comparison, deep learning techniques or multimodal malware identification techniques are not included. Finally, Razak, et al. [34] have done a malware bibliometric study to examine publications related to malware by region,            Machine Learning Classifiers for Malware Detection 273  organization, and author. However, the paper does not define the features of malware detectors and does not consider the latest technologies in this field. Sakhnini, et al. (2019) [44] present a bibliometric survey focusing on the security aspects of IoT enabled smart grids. Furthermore, the authors address the problem of the different types of cyber attacks that they found related to a particular topic. Yazdinejad, et al. (2020) [45] designed a novel RNN model in order to detect malware threats in cryptocurrencies. The authors for this particular study collected 500 samples of cryptocurrency malware and 200 samples of goodware. Table 1 Recent research in machine learning-based Android malware detection. Authors Features Algorithm Comment Sahs & Khan (2012) [46] Permissions, CFG subgraphs 1-class SVM Sahs & Khan’s approach yielded high recall with low precision. The vast majority of our in-lab classifiers yielded both a high recall and a high precision.  Amos, et al. (2013) [47] Profiling (dynamic) Random Forest, C4.5, etc. Our closest experiment (goodware/ malware ratio: 1/2) yielded dozens of classifiers with equivalent or better performance.  Yerima, et al. (2013) [48] API calls, external tool execution, permissions (static) Bayesian Our closest in-lab experiment (goodware/malware ratio: 1) yielded 74 classifiers with both higher recall and higher precision than Yerima, et al.’s best classifier.  Canfora, et al. (2013) [49] SysCalls, permissions C4.5, Random Forest, etc. In our closest experiment by dataset size (good ware/malware ratio: 1/2), our worst classifier performed better than Canfora, et al.’s best classifier. In our closest experiment by good ware/malware ratio (1), the vast majority of our classifiers performed better than Canfora, et al.’s best classifier.  Wu, et al. (2012) [50] Permissions, API calls, etc. KNN, Naive Bayes More than 100 of our in-lab classifiers yielded both a higher recall and a higher precision than Wu, et al.’s best classifier. 3.1 Research Issues and Challenges The following 



Section discusses some of the problems and concerns that security scientists face.  274    Saleh Abdulaziz Habtor & Ahmed Haidarah Hasan Dahah  1. Class imbalance: Collecting successful training data complicates aspects of any machine-learning problem. Machine-learning classifiers are as successful as the data they are fed to be qualified. Correctly labeling information is highly necessary to detect malware and can be a process that takes a lot of time.  2. Open and available benchmarks: The role of identifying and classifying malware is not the same as other programs with rich databases in the testing community. It includes digit scoring, voice recognition, photo labeling, etc. Legal 

Limitations make this problem worse. Although web pages like VirusShare and VX Heaven openly distribute malware binaries, benign binaries are also protected by copyright laws from sharing. Nevertheless, benign and malicious binaries can only be accessed in bulk through providers such as VirusTotal for internal use, but subsequent distribution is forbidden.  3. Concept drift: The word ‘concept drift’ is used in the machine-learning literature to refer to the issue of interaction evolution in knowledge. Supervised learning is a function of the computer to transform an input to an output based on a series of input output samples. In technical terms, the problem is that the mapping function (f) given input data (x) is approximated in order to estimate an output (y), y = f(x). Common computer apps such as automated sorting, text categorization, or voice recognition presume that the data is taken from a population that is stationary. They believe that data mapped in the past will remain true in the future and that new data and the relations between input and output do not change over time. This does not extend to the issue of malware detection and classification.  4. Adversarial learning: Malware learns to live and function. In other words, malicious software must continuously improve in order to resist anti-malware detection. As a result, there is a strong incentive for malware authors to attempt to evade detection by using obscuring strategies (You, et al., 2010 [35]; O’Kane, et al., 2011 [36]).  5. Form interpretability: Understanding the latest available mechanical learning techniques is a problem (Shirataki & Yamaguchi, 2017[37]; Gilpin, et al., 2018 [38]). Many models being used are called a black box. A black box comes with an input X, which generates an output Y by a series of operations that are difficult for a human being to comprehend. This could pose a challenge when a false alert occurs in a cyber security application and researchers try to find out why it has occurred. The model’s interpretability defines how quickly examiners can handle and analyze the output and correct the working of the defined model. 4 Materials and Method We see malware analysis and identification as a binary classification problem, where the two types of software to be classified are malware and goodware.            Machine Learning Classifiers for Malware Detection 275  Figure 3 shows that the proposed approach is a multi-step process consisting of various steps performing several tasks. The system can be divided into three parts: clustering, decision making, data processing, and dataset preparation and division. 4.1 System Architecture  Figure 3 Block diagram of research 



Methodology. 4.2 System Description 4.2.1 Description of Dataset It is important to create a large dataset with several different samples to test the effectiveness of classical machine learning and deep learning architectures. Because of the privacy-preserving policies of individuals and organizations, publicly available databases for potential cyber security research for malware detection are extremely limited. Over time, the provision of one source for all kinds of malware families has become increasingly difficult as malware has evolved. Researchers share their findings, but all the necessary samples have not 276    Saleh Abdulaziz Habtor & Ahmed Haidarah Hasan Dahah  been collected in one single dataset or repository yet. In this study, the publicly accessible dataset Ember was used, with a subset containing 70,140 benign and 69,860 malicious files. This dataset was randomly divided into 60% training and 40% testing data using Scikit-learn. The training dataset consisted of 42,140 benign files and 41,860 malicious files. In the training dataset, 28,000 benign files and 28,000 malicious files existed. These samples were derived from VirusTotal, VirusShare and privately collected samples of benign and malware samples (Kaggle [28]). 4.2.2 Feature Extraction As discussed above, our data kit consisted of 140,000 executable files. We disassembled these functions by translating the .exe file into an .asm file. The object dump tool that is part of the GNU Binutils package was used. When some executable files were disabled or encrypted, these files were deleted from the dataset. 4.2.3 Opcode n-gram In order to reverse the malware review, we used IDA Pro. IDA Pro is a versatile dynamic disassembler published by Hex-Rays (Tian, et al. [39], Ye, et al. [40]). It is necessary to access the malware assembly code and use it to define function blocks and explain the process flow map, import methods, etc. 4.2.4 n-gram In this analysis, we used an n-gram model to remove opcode functionality from the malware. It is an easy way to remove text functions. The presence of n terms is only correlated with the previous n − 1 terms, n being the length of one function sequence. If we have a set of L opcodes, then the set will be split into sequences of L – n + 1 attributes. This model seeks sequences of functions in a sliding pane. A 3-gram model, for example, is used to obtain functional sequences from for example, call, push, mov, add, pop, inc and xor. As shown in Figure 4, we take out five short strings, and three opcodes are used in each sequence. push call add mov xor inc pop push call add mov xor inc pop push call add mov xor inc pop push call add mov xor inc pop push call add mov xor inc pop Figure 4 Opcode 3-gram model            Machine Learning Classifiers for Malware Detection 277  4.2.5 Feature Selection Choosing features that can discern malware families is important. The features are extracted via the n-gram model as high-dimensional data. A modern approach is used to reduce the dimensionality of the data to increase classification accuracy and to minimize time usage. We discuss some definitions that aid in the definition. Y = {0,1,...} is the malware family, symbol Si refers to a set of functions. The given Eq. (1) shows a frequency series:  𝑓(𝑠 ) = 𝑠𝑢𝑚(𝑠 |𝑦 )/ ∑ 𝑠𝑢𝑚(𝑠 |𝑦 )               (1) where the number of the sequence belonging to family yj is denoted by sum(si) and the frequency of the sequence in Y is F(si):   𝐹(𝑠 ) =∑ 𝑠 𝑦∑  ∑ 𝑠 𝑦                         (2) The data gained by the series is:  𝐼 (𝑆; 𝑌) = ∑ ∑ 𝑝(𝑠 𝑦 )𝑙𝑜𝑔 ( )( ). ( )∈∈       (3) p(si, y) is a combined distribution of probability of si and y, and p(si) and p(y) are the cumulative distribution of likelihood functions of S and Y respectively. Information gain is used to calculate the malware sequence’s ability to differentiate. We use a two-step dimension reduction technique.  If the condition of the function is satisfied, it is deleted. This indicates that the characteristics are not found in the malware categories. Then, a new value of the data is determined:  𝐼 (𝑆; 𝑌) =( )∑ ∑ 𝑝(𝑠 𝑦 )𝑙𝑜𝑔 ( )( ). ( )∈∈      (4) The phrase has a weight definition. This concept seeks to increase the value of certain low frequencies and high discrimination characteristics. We maintain 500 settings with greater values when measuring the information gain. 4.3 Decision Making System This paper proposes a decision making method to catch malicious applications that could be part of a common family or a new malware program. It defines the product labels by combining several findings. A weight vector is built for each grouping in accordance with previous ensemble schemes (Hu, et al. [41], Tao, et al. [42]). The vector weight includes n weight quantities, where n represents the sample family number. In Figure 5, N graders and N weight vectors are available. The Bootstrap sample of a training kit classifier is programmed. Test range T1 is used to evaluate each classifier’s ability. The ability reaches a specific increased 278    Saleh Abdulaziz Habtor & Ahmed Haidarah Hasan Dahah  amount and then correctly categorizes the individual unit. Different classifiers can influence different families. Each classifier is therefore able to provide classification outcomes with a greater degree of trust.  Figure 5 Decision making system. Table 2 Similarities of the samples. Sample A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 P1 1 1 0 0 0 0 0 0 0 0 P2 0 0 0 0 0 0 0 0 1 1 P3 0 0 0 0 1 1 1 1 1 1 D(P1, P2) = 2, D(P2, P3) = 2, and D(P1, P3) = 6 are determined. There are two 



Conclusions:  1. P1 and P3 have the same relation to P2, i.e. they have the same distance to P2. 2. P1 and P3 are similar to P2; P1 is also similar to P3.  Suppose the abovementioned three examples are instances of malware. Suppose further that these samples contain the value of a variable that is not zero. Table 1 reveals P1 and P2 have no similar characteristics while P2 and P3 have two similar characteristics. That is why the Euclidean distance does not necessarily demonstrate the resemblance of samples in a wide space.             Machine Learning Classifiers for Malware Detection 279  Given the problems described above we followed the SNN approach, which works well in high-dimensional spaces. Jarvis & Patrick [43] first proposed this method. The similarity between two points is featured by the fact that they share a major quarter C with at least k points. This approach has the advantage that it can cluster points of varying densities. As shown in Figure 6, the clustering of varying densities represents circles of different sizes.  In each row of the matrix of similarities the relation of position M between two points is stored. M(A, B) = 1 means that B is nearest to A. In-row saves only k minimum values, and all values are set to 0. The matrix is used to create the nearest K (K-NN) line. From Fig. 10, the points O and P are noise or outliers, but graphs are not used to differentiate them. The extent of the relationship is calculated by:  𝑠𝑡𝑟(𝑂, 𝑃) =  ∑(𝑘 + 1 − 𝑚). (𝑘 + 1 − 𝑛)               (5) If a point’s value is smaller than a unique threshold it looses all edges. In Fig. 10, O and P points are listed as outliers. Ertoz, et al. have focused on the link strength to choose the main points of each cluster with a higher connection capacity. In each cluster, a point is either one of the core points or linked to the core points.  Figure 6 (a) Near neighbor graph and (b) weighted shared near neighbor graph. The SNN model may be defined as follows: 1. calculate the matrix of similarities; 2. build the K-NN graph; 3. calculate the relation intensity and set the threshold to find low-strength noise and outliers. 4. select the high-strength core points; 5. assign, or mark as an outlier, a new point to the clustering. 280    Saleh Abdulaziz Habtor & Ahmed Haidarah Hasan Dahah  5 Result and Analysis In the analysis of the research 



Methodology presented in the current work a dataset with 1,40,000 different samples was considered, from which 60% of the data were considered for the purpose of training and the remaining 40% were considered for the testing process. The complete dataset is a collection of benign and malicious files with 70,140 benign files and 69,860 malicious files. Different known classifiers, i.e. Decision Tree, K-Nearest Neighbor, Naïve Bayes, Support Vector Machine, Random Forest, and J48 Decision Tree, were used in the decision making process. The performance of all of the classifiers was evaluated based on the accuracy of the process, which is the percentage of correctly identified instances.  𝐴𝑐𝑐𝑢𝑟𝑎𝑐𝑦 =   (   ) (  )               (6) 5.1 K-Nearest Neighbor Figure 7 below shows the outcome of the K-Nearest Neighbor method, as can seen in Table 3. The 

Results are shown in terms of the accuracy of each class of malware. Here, the maximum accuracy was 100%, achieved by CyberGate, and the minimum accuracy was 79.2%, achieved by CTB- Locker.   Figure 7 Classification of different classes of malware using k-Nearest Neighbor. Table 3 shows the classification of files as goodware or malware using K-Nearest Neighbor. As the 

Results show, around 82.3% accuracy was seen for benign files and around 98% accuracy for the malware considered in the dataset. Table 4 below shows the exact accuracy for the classification/ identification of benign 05001000150020002500300035004000Correctly Classified Incorrectly Classified           Machine Learning Classifiers for Malware Detection 281  files and malware detected, where the accuracy of the classification of malicious files was about 98%. Table 3 Detection evaluation using K-Nearest Neighbor. S.N. Family of Sample Correctly Classified Incorrectly Classified Accuracy 1. Benign 3499 834 82.3% 2. Dridex 1880 340 84.2% 3. Locky 1340 280 83.4% 4. TeslaCrypt 2600 40 98% 5. Vawtrak 920 160 84.5% 6. Zeus 1820 580 78% 7. DarkComet 2840 100 96% 8. CyberGate 2300 0 100% 9. Xtreme 1880 160 93% 10. CTB-Locker 1040 280 79.2% Table 4 Benign and malicious file accuracy using K-Nearest Neighbor. Class Correctly Classified Incorrectly Classified Accuracy Benign 3499 834 82.3% Malicious 16620 1940 98% 5.2 Support Vector Machine Support Vector Machine was the next algorithm that was tested. In Table 5 and Figure 8, the outcome of the predictions can be seen. The overall accuracy obtained for multi-class classification was 87.6% and for binary classification 94.6%. The maximum accuracy was 100%, achieved by CTB-Locker, and the minimum accuracy was 59.3%, achieved by Vawtrak. Table 6 shows the classification of files as goodware or malware using Support Vector Machine. As the 

Results show, around 83.8% accuracy was seen for benign files and around 89.3% accuracy in the case of malware. Table 5 Detection evaluation using Support Vector Machine. S.N. Family of Sample Correctly Classified Incorrectly Classified Accuracy 1. Benign 3996 335 93% 2. Dridex 1940 280 87.3% 3. Locky 1280 340 78.7% 4. TeslaCrypt 2240 400 85.1% 5. Vawtrak 620 460 59.3% 6. Zeus 1880 520 79.1% 7. DarkComet 2900 40 98.2% 8. CyberGate 2240 40 98% 9. Xtreme 1880 160 92.1% 10. CTB-Locker 1320 0 100% 282    Saleh Abdulaziz Habtor & Ahmed Haidarah Hasan Dahah   Figure 8 Classification of the different classes of malware using Support Vector Machine. Table 6 Accuracy of benign and malicious files using Support Vector Machine. Class  Correctly Classified Incorrectly Classified Accuracy Benign 3996 8335 83.8% Malicious 16300 2240 89.37% 5.3 J48 Decision Tree J48 Decision Tree was the third algorithm studied (Table 7 and Figure 9). The benefit of the decision tree method is that it works in a ‘white box’ approach and we can see which decisions resulted from our prediction. Here, maximum accuracy was 100% (Drdex, TeslaCrypt and CyberGateis) and the minimum accuracy was 83.7% (Zeus). Table 7 Detection evaluation using J48 Decision Tree. S.N. Family of Sample Correctly Classified Incorrectly Classified Accuracy 1. Benign 3854 477 89.7% 2. Dridex 2240 0 100% 3. Locky 1460 160 90.1% 4. TeslaCrypt 2240 0 100% 5. Vawtrak 980 100 91.3% 6. Zeus 2000 400 83.7% 7. DarkComet 2840 100 96.3% 8. CyberGate 2240 0 100% 9. Xtreme 1940 100 95.6% 10. CTB-Locker 1280 40 96.3% 050010001500200025003000350040004500Correctly Classified Incorrectly Classified           Machine Learning Classifiers for Malware Detection 283  Table 8 shows the classification of files as goodware or malware using J48 decision tree. As the 

Results show, around 83.8% accuracy was seen for benign files and around 99.5% accuracy in the case of malware.  Figure 9 Classification of the different classes of malware using J48 Decision Tree. Table 8 Accuracy of benign and malicious files using J48 Decision Tree. Class Correctly Classified Incorrectly Classified Accuracy Benign 3996 8335 83.8% Malicious 16300 2240 99.5% 5.4 Naïve Bayes Naïve Bayes was the next algorithm that was evaluated. Table 9 lists the 

Results of the predictions. Here, the maximum accuracy was 100%, achieved by Dark Comet and CTB-Locker, and the minimum accuracy was of 3.5%, achieved by Dridex (Figure 10). Table 9 Detection evaluation using Naïve Bayes. S.N. Family of Sample Correctly Classified Incorrectly Classified Accuracy 1. Benign 2434 1897 60% 2. Dridex 80 2140 3.5% 3. Locky 1520 100 93% 4. TeslaCrypt 2000 640 93.6% 5. Vawtrak 500 580 50% 6. Zeus 1700 700 72% 7. DarkComet 2940 0 100% 8. CyberGate 2240 40 98.1% 9. Xtreme 1880 160 92.8% 10. CTB-Locker 1320 0 100% 010002000300040005000Correctly Classified Incorrectly Classified284    Saleh Abdulaziz Habtor & Ahmed Haidarah Hasan Dahah  Table 10 the classification of files as goodware or malware using J48 Decision Ttree. As the 

Results show, around 100% accuracy was seen for benign files and around 68.3% accuracy in the case of malware in the dataset.  Figure 10  Classification of the different classes of malwares using naïve Bayes. Table 10 Accuracy of benign and malicious files using naïve Bayes. Class Correctly Classified Incorrectly Classified Accuracy Benign 4331 0 100% Malicious 13180 4360 68.3% 5.5 Random Forest Random Forest was the last algorithm that was tested. The algorithm resulted in good prediction accuracy. Table 4 presents the 

Results of its predictions. Here, the maximum accuracy was 100%, achieved by DarkComet, CyberGate, Xtreme, and CTB- Locker (Figure 11). Table 11 Detection evaluation using Random Forest. S.N. Family of Sample Correctly Classified Incorrectly Classified Accuracy 1. Benign 4138 193 96.1% 2. Dridex 2120 100 95.7% 3. Locky 1520 100 93.3% 4. TeslaCrypt 2640 0 100% 5. Vawtrak 920 160 84.7% 6. Zeus 2120 280 88.7% 7. DarkComet 2940 0 100% 8. CyberGate 2280 0 100% 9. Xtreme 2040 0 100% 10. CTB-Locker 1320 0 100% 0500100015002000250030003500Correctly Classified Incorrectly Classified           Machine Learning Classifiers for Malware Detection 285  Table 11 shows the classification of files as goodware or malware using Random Forest. The 

Results show that around 87.2% accuracy was seen for benign files and around 99.2% accuracy in the case of malwares class in the dataset.  Figure 11  Classification of the different classes of malware using Random Forest. Table 12 Accuracy of benign and malicious files using Random Forest. Class Correctly Classified Incorrectly Classified Accuracy Benign 4138 193 87.2% Malicious 16580 640 99.2% Figure 12 shows that the different models provided different 

Results in classification. Naive Bayes had the lowest accuracy (100% and 68.3%), followed by K-Nearest Neighbor and Support Vector Machine (82.3%, 98% and 83.8%, 89.37% respectively). The highest precision was achieved with J48 and Random Forest (83.8%, 99.5%, and 87.2%, 99.5% respectively).  050010001500200025003000350040004500Correctly Classified Incorrectly Classified286    Saleh Abdulaziz Habtor & Ahmed Haidarah Hasan Dahah   Figure 12 Comparison graph for the accuracy of the different classifiers. 6 

Conclusion Because of the ever growing number of malware variants and the variety of malware activities there is renewed interest in and need for effective malware detectors to protect against zero-day attacks. Anti-virus firms typically collect millions of malicious samples, which are obtained and analyzed in the usual manner, delaying the identification of any unusual samples that harm users. Our primary aim was to create a machine-learning system that commonly detects as many malware samples as possible, with the tough constraint of having a zero false positive rate. We came quite close to our goal, but still have a non-zero false positive rate. For this method to become part of a highly competitive commercial product, a number of deterministic exemption mechanisms must be added. In the proposed work, the Random Forest and Naïve Bayes classifiers showed the best 

Results.  The system was validated using a sample of 140,000 files consisting of malware and benign files. The malware was further divided into 9 different classes on the basis of their properties. The complete sample list was categorized into groups at a 60% and 40% ratio for further processing of system training and decision making as training dataset and testing dataset respectively. Given that most anti-virus products achieve a detection rate of more than 90% there was a very significant increase in the overall detection rate of 3 to 4% produced by our algorithms.            Machine Learning Classifiers for Malware Detection 287  7 Future Scope In the future more features will be considered to develop a better model that will use a more robust deep learning technique for the detection of cyber attacks. It will also be capable of detecting all types of different malware attacks and automatically deal with all types of cyber attacks. 



References [1] Santos, I.,  Penya,  Y.K., Bringas, P.G. &  Devesa, J., N-grams-based File Signatures for Malware Detection, Proceedings of the 11th International Conference on Enterprise Information Systems - Artificial Intelligence and Decision Support Systems, pp. 317-320. 9, 2009. [2] Rieck, K., Holz, T., Willems, C., Düssel, P. & Laskov, P., Learning and Classification of Malware Behavior, International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment, pp. 108-125, 2008. [3] Konstantinou, E. & Wolthusen, S., Metamorphic Virus: Analysis and Detection, Technical Report, RHUL-MA-2008-02, Royal Holloway University of London, 2008. [4] Horton, J. & Seberry, J., Computer Viruses: An 



Introduction, University of Wollongong , 1997. [5] Smith, C., Matrawy, A., Chow, S. & Abdelaziz, B.,  Computer Worms,  Architectures, Evasion Strategies, and Detection Mechanisms, Journal of Information Assurance and Security, 4, pp. 69-83, 2009. [6] Moffie, M., Cheng, W., Kaeli, D. & Zhao, Q. Hunting Trojan Horses, Proceedings of the 1st Workshop on Architectural and System Support for Improving Software Dependability, pp. 12-17, October, 2006. [7] Chien, E., Techniques of Adware and Spyware, Proceedings of the Fifteenth Virus Bulletin Conference, Dublin Ireland, 47, 2005. [8] Chuvakin, A., An 

Overview of Unix Rootkits, iALERT White Paper, iDefense Labs, http://www.megasecurity.org/papers/Rootkits.pdf, 2003. [9] Chumachenko, K., Machine Learning Methods for Malware Detection and Classification, Department of Information Technology, University of Applied Science, Bremen, 2017. [10] Savage, K., Coogan, P. & Lau, H., The Evolution of Ransomware, Version 1.0, Symantec Corporation, http://www.symantec.com/content/en/us/ enterprise/media/security_response/whitepapers/the-evolution-of-ransomware.pdf., August 6, 2015. [11] Prasad, B.J., Annangi, H. & Pendyala, K.S., Basic Static Malware Analysis Using Open-Source Tools, 2016. 288    Saleh Abdulaziz Habtor & Ahmed Haidarah Hasan Dahah  [12] Egele, M., Scholte, T., Kirda, E. & Kruegel, C., A Survey on Automated Dynamic Malware-analysis Techniques and Tools, ACM computing surveys (CSUR), 44(2), pp. 1-42. 2008. [13] Ronen, R., Radu, M., Feuerstein, C., Yom-Tov, E. & Ahmadi, M., Microsoft Malware Classification Challenge, arXiv preprint arXiv:1802.10135, 2018. [14] Gibert, D., Mateu, C. & Planes, J., The Rise of Machine Learning for Detection and Classification of Malware: Research Developments, Trends and Challenge, Journal of Network and Computer Applications,  153, 102526, 2020. [15] Chu, Q., Liu, G. & Zhu, X., Visualization Feature and CNN Based Homology Classification of Malicious Code, Chinese Journal of Electronics, 29(1), pp. 154-160, 2020. [16] Baskaran, B. & Ralescu, A., A Study of Android Malware Detection Techniques and Machine Learning, MAICS, pp. 15-23, 2016. [17] Rieck, K., Trinius, P., Willems, C. & Holz, T., Automatic Analysis of Malware Behavior Using Machine Learning, Journal of Computer Security, 19(4), pp. 639-668, 2011. [18] Schultz, M.G., Eskin, E., Zadok, E. & Stolfo, S.J., Data Mining Methods for Detection of New Malicious Executables, in Proceedings 2001 IEEE Symposium on Security and Privacy, pp. 38-49, IEEE, 2000. [19] Bilar, D., Opcodes as Predictor for Malware, International Journal of Electronic Security and Digital Forensics, 1(2), pp. 156-168, 2007. [20] Sharma, S., Krishna, C.R. & Sahay, S.K., Detection of Advanced Malware by Machine Learning Techniques, Soft Computing: Theories and Applications, Springer, Singapore, pp. 333-342., 2019. [21] Shabtai, A., Moskovitch, R., Elovici, Y. & Glezer, C., Detection of Malicious Code by Applying Machine Learning Classifiers on Static Features: A State-of-the-Art Survey, Information Security Technical Report, 14(1), pp. 16-29, 2009. [22] Moskovitch, R., Feher, C., Tzachar, N., Berger, E., Gitelman, M., Dolev, S. & Elovici, Y., Unknown Malcode Detection Using Opcode Representation, European Conference on Intelligence and Security Informatics, Springer, Berlin, Heidelberg, pp. 204-215, 2008. [23] Santos, I., Nieves, J. & Bringas, P.G., Semi-supervised Learning For Unknown Malware Detection, International Symposium on Distributed Computing and Artificial Intelligence, Springer, Berlin, Heidelberg, 2011. [24] Santos, I., Brezo, F., Ugarte-Pedrero, X. & Bringas, P.G., Opcode Sequences as Representation of Executables for Data Mining-based Unknown Malware Detection, Information Sciences, 231, pp. 64-82, 2013. [25] Shabtai, A., Kanonov, U.,  Elovici, Y., Glezer, C. & Weiss, Y., ‘Andromaly’: A Behavioral Malware Detection Framework for Android            Machine Learning Classifiers for Malware Detection 289  Devices, Journal of Intelligent Information Systems, 38(1), pp. 161-190, 2012. [26] Sharma, A. & Sahay, S.K., An Effective Approach for Classification of Advanced Malware with High Accuracy, arXiv preprint arXiv:1606.06897, 2016. [27] Sahay, S.K. & Sharma, A., Grouping the Executables to Detect Malware with High Accuracy, arXiv preprint arXiv:1606.06908, 2016. [28] Rohan, P., Microsoft Malware Classification Challenge (BIG 2015), Microsoft, https://www.kaggle.com/c/malware-classification, (10 Dec. 2016. [29] Ahmadi, M., Ulyanov, D., Semenov, S., Trofimov, M. & Giacinto, G. Novel Feature Extraction, Selection and Fusion for Effective Malware Family Classification, Proceedings of the Sixth ACM Conference on Data and Application Security and Privacy, pp. 183-194, 2016. [30] Drew, J., Hahsler, M. & Moore, T., Polymorphic Malware Detection Using Sequence Classification Methods, 2016 IEEE Security and Privacy Workshops (SPW), IEEE, 2016. [31] Souri, A. & Hosseini, R., A State-of-the-Art Survey of Malware Detection Approaches Using Data Mining Techniques, Human-Centric Computing and Information Sciences 8, 3, 2018. DOI: 10.1186/s13673-018-0125-x. [32] Ucci, D., Aniello, L. & Baldoni, R., Survey of Machine Learning Techniques for Malware Analysis, Computers & Security, 81, pp. 23-147, 2019. [33] Ye, Y., Li, T., Adjeroh, D. & Iyengar, S.S., A Survey on Malware Detection Using Data Mining Techniques, ACM Computing Surveys (CSUR), 50, pp. 31-40, 2017. [34] Ab Razak, M.F., Anuar, N.B., Salleh,  R. & Firdaus, A., The Rise of ‘Malware’: Bibliometric Analysis of Malware Study, Journal of Network and Computer Applications, 75, pp. 58-76, 2016. [35] You, I. & Yim, K., Malware Obfuscation Techniques: A Brief Survey, International Conference on Broadband, Wireless Computing, Communication and Applications, IEEE, 2010. DOI: 10.1109/BWCCA.2010.85. [36] O’Kane, P., Sezer, S. & McLaughlin, K., Detecting Obfuscated Malware Using Reduced Opcode Set and Optimised Runtime Trace, Security Informatics, 5, 2, 2016. DOI: 10.1186/s13388-016-0027-2. [37] Shirataki, S. & Yamaguchi, S., A Study on Interpretability of Decision of Machine Learning, 2017 IEEE International Conference on Big Data (Big Data), IEEE, PP. 4830-4831, 2017. [38] Gilpin, L.H., Bau, D., Yuan, B.Z., Bajwa, A., Specter, M. & Kagal, L., Explaining Explanations: An 

Overview of Interpretability of Machine Learning, 2018 IEEE 5th International Conference on Data Science and Advanced Analytics (DSAA), pp. 80-89, IEEE, 2018. 290    Saleh Abdulaziz Habtor & Ahmed Haidarah Hasan Dahah  [39] Tian, R., Batten, L., Islam, Md.R. & Versteeg, S., An Automated Classification System Based on the Strings of Trojan and Virus Families, 2009 4th International Conference on Malicious and Unwanted Software (MALWARE), pp. 23-30, IEEE, 2009. [40] Ye, Y., Li, T., Chen, Y. & Jiang, Q, Automatic Malware Categorization Using Cluster Ensemble, Proceedings of the 16th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, pp. 95-104, July, 2010. [41] Qinghua, H., Yu, D., Xie, Z. & Li, X., EROS: Ensemble Rough Subspaces, Pattern Recognition, 40(12), pp. 3728-3739, 2007. [42] Tao, H., Ma, X-P. & Qiao, M-Y., Subspace Selective Ensemble Algorithm Based on Feature Clustering, Journal of Computers 8(2), pp. 509-516, 2013. [43] Jarvis, R.A. & Patrick., E.A., Clustering using a Similarity Measure Based on Shared Near Neighbors, IEEE Transactions on Computers, 100(11), pp. 1025-1034, 1973. [44] Sakhnini, J., Karimipour, H., Dehghantanha, A., Parizi, R.M. & Srivastava, G., Security Aspects of Internet of Things Aided Smart Grids: A Bibliometric Survey, Elsevier’s Internet of Things, 100111, 2019. [45] Yazdinejad, A., HaddadPajouh, H., Dehghantanha, A., Parizi, R.M.,  Srivastava, G. & Chen, M-Y., Cryptocurrency Malware Hunting: A Deep Recurrent Neural Network Approach, Applied Soft Computing, 96, 106630, 2020. [46] Laitner, J.A., Nadel, S., Elliott, R.N., Sachs, H. & Khan, S., The Long-Term Energy Efficiency Potential: What The Evidence Suggests, E121, American Council for an Energy-Efficient Economy, Washington DC, 2012. [47] Amos, B., Turner, H. & White, J., Applying Machine Learning Classifiers to Dynamic Android Malware Detection at Scale, 2013 9th International Wireless Communications And Mobile Computing Conference (IWCMC), pp. 1666-1671, IEEE, 2013. [48] Yerima, S.Y., Sezer, S. & McWilliams, G., Analysis of Bayesian Classification-based Approaches for Android Malware Detection, IET Information Security, 8(1), pp. 25-36, 2013. [49] Canfora, F., Nonlinear Superposition Law and Skyrme Crystals, Physical Review D, 88(6), 065028, 2013. [50] Wu, D-J., Mao, C-H., Wei, T-E., Lee, H-M. & Wu, K-P., Droidmat: Android Malware Detection through Manifest and API Calls Tracing, 2012 Seventh Asia Joint Conference on Information Security, pp. 62-69, IEEE, 2012. 
