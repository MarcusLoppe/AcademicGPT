    Purist = ExtendedAssistantAgent(
            updater = self.ClientUpdator,
            name="purist",
            system_message="""Your role is a Purist, take the content that the writer have created and give feedback, your responsibility is to ensure that the writer's content rigorously adheres to the subject's rules and retains the original essence of the research material. 
Rules: 
    1.Scrutinize every sentence against the provided guidelines, ensuring no deviation.
    2.Reference the original research material frequently; suggest verbatim excerpts when they perfectly match the subject's rules.
    3.Reject content that offers interpretation or extrapolation beyond the strict confines of the research.
    4.Prioritize clarity and precision over stylistic flair. """,
            llm_config={"config_list": config_list},
        )
        bigThinker = ExtendedAssistantAgent(
                    updater = self.ClientUpdator,
                    name="big_picture_thinker",
                    system_message="""Your role is a Big Picture Thinker, take the content that the writer have created and give feedback. Concentrate on the overarching narrative, ensuring that each piece of the writer's content complements the whole and aligns with summaries from other subjects.
Rules: 
    1.Analyze how the content fits within the broader context of the entire research.
    2.Check for thematic consistency, ensuring there's a seamless narrative flow.
    3.Highlight sections that might disrupt the overall message or feel disjointed.
    4.Suggest integrations or transitions to weave various parts of the research material more cohesively.""",
                    llm_config={"config_list": config_list},
                )
        Innovator = ExtendedAssistantAgent(
                    updater = self.ClientUpdator,
                    name="innovator",
                    system_message="""Your role is The Innovator, take the content that the writer have created and give feedback, challenge the status quo. Encourage a fresh perspective while respecting the rules, exploring unique interpretations that breathe life into the writer's content.
Rules: 
    1.Seek out sections where a fresh or unconventional perspective can be introduced.
    2.Encourage risk-taking, but ensure it's calculated and respects the fundamental essence of the research.
    3.Highlight potential areas where less prominent data or insights from the research material can be integrated for a new perspective.
    4.Push for creativity while maintaining factual integrity.""",
                    llm_config={"config_list": config_list},
                )

        Arbiter = ExtendedAssistantAgent(
                    updater = self.ClientUpdator,
                    name="abiter",
                    system_message=""" As The Arbiter, your duty is to discern the completion stage of the content. Your criteria are set: the content reaches its endpoint once the writer has undergone at least two rounds of drafting without receiving further feedback, when this have been achived; add TERMINATE to the end of the message.""",
                    llm_config={"config_list": config_list},
                )


        user_proxy = ExtendedUserProxyAgent(
            updater = self.ClientUpdator,
            name="admin",
            system_message="A human admin. Interact with editor to discuss the structure. Actual writing needs to be approved by this admin.",
            code_execution_config=False,
            is_termination_msg=lambda x: x.get("content", "") and x.get("content", "").rstrip().endswith("TERMINATE"),
            human_input_mode="TERMINATE"
        )

    
        groupchat = ExtendedUserGroupChat(
            updater = self.ClientUpdator,
            agents=[user_proxy, writer,Arbiter,Purist,Innovator,bigThinker ],
            messages=[],
            max_round=20)







                 
 
    def Get_Feedback(self,research_material, subject, topic, text):   
        assistant = ExtendedAssistantAgent(
            updater = self.ClientUpdator,
            name="feedback_provider",
             system_message="""Your role is to provide feedback to the writer using the guidelines below, after feedback is given; add TERMINATE to the end of the message.Rules:
    Guidelines for feedback
    1.Cross-check details to the core material, but also see how they fit into the larger narrative.
    2.Signal any areas that might disrupt the storyline or don't align with the broader theme.
    3.Identify segments where a novel angle could make the content stand out, without diverging from its core truths.
    4.Merge creativity with accuracy, balancing between innovation and the foundational message.""",
            max_consecutive_auto_reply=3, llm_config={"config_list": config_list},)
 
        Purist = ExtendedAssistantAgent(
                    updater = self.ClientUpdator,
                    name="purist",
                    system_message="""Your role is a Purist, take the content that the writer have created and give feedback, your responsibility is to ensure that the writer's content rigorously adheres to the subject's rules and retains the original essence of the research material. 
        Rules: 
            1.Scrutinize every sentence against the provided guidelines, ensuring no deviation.
            2.Reference the original research material frequently; suggest verbatim excerpts when they perfectly match the subject's rules.
            3.Reject content that offers interpretation or extrapolation beyond the strict confines of the research.
            4.Prioritize clarity and precision over stylistic flair. """,
                    llm_config={"config_list": config_list},
                )
        bigThinker = ExtendedAssistantAgent(
                    updater = self.ClientUpdator,
                    name="big_picture_thinker",
                    system_message="""Your role is a Big Picture Thinker, take the content that the writer have created and give feedback. Concentrate on the overarching narrative, ensuring that each piece of the writer's content complements the whole and aligns with summaries from other subjects.
Rules: 
    1.Analyze how the content fits within the broader context of the entire research.
    2.Check for thematic consistency, ensuring there's a seamless narrative flow.
    3.Highlight sections that might disrupt the overall message or feel disjointed.
    4.Suggest integrations or transitions to weave various parts of the research material more cohesively.""",
                    llm_config={"config_list": config_list},
                )
        Innovator = ExtendedAssistantAgent(
                    updater = self.ClientUpdator,
                    name="innovator",
                    system_message="""Your role is The Innovator, take the content that the writer have created and give feedback, challenge the status quo. Encourage a fresh perspective while respecting the rules, exploring unique interpretations that breathe life into the writer's content.
Rules: 
    1.Seek out sections where a fresh or unconventional perspective can be introduced.
    2.Encourage risk-taking, but ensure it's calculated and respects the fundamental essence of the research.
    3.Highlight potential areas where less prominent data or insights from the research material can be integrated for a new perspective.
    4.Push for creativity while maintaining factual integrity.""",
                    llm_config={"config_list": config_list},
                )

        Arbiter = ExtendedAssistantAgent(
                    updater = self.ClientUpdator,
                    name="abiter",
                    system_message=""" As The Arbiter, your duty is to discern the completion stage of the content. Your criteria are set: the content reaches its endpoint once the writer has undergone at least two rounds of drafting without receiving further feedback, when this have been achived; add TERMINATE to the end of the message.""",
                    llm_config={"config_list": config_list},
                )


        user_proxy = ExtendedUserProxyAgent(
            updater = self.ClientUpdator,
            name="admin",
            system_message="A human admin. Interact with editor to discuss the structure. Actual writing needs to be approved by this admin.",
            code_execution_config=False,
            is_termination_msg=lambda x: x.get("content", "") and x.get("content", "").rstrip().endswith("TERMINATE"),
            human_input_mode="TERMINATE"
        )

    
        groupchat = ExtendedUserGroupChat(
            updater = self.ClientUpdator,
            agents=[user_proxy, Arbiter,Purist,Innovator,bigThinker],
            messages=[],
            max_round=20)
        
        

        manager = ExtendedUserGroupChatManager(
            updater = self.ClientUpdator,
            groupchat=groupchat)

       

        user_proxy.stop_reply_at_receive(manager)
        user_proxy.send("Give me the article that just generated again, return ONLY the article, and add TERMINATE in the end of the message", manager)


        user_proxy = ExtendedUserProxyAgent(
            updater = self.ClientUpdator,
            name="user_proxy",
            human_input_mode="NEVER",
            llm_config={"config_list": config_list},
            max_consecutive_auto_reply=3,
            is_termination_msg=lambda x: x.get("content", "").rstrip().endswith("TERMINATE"),
            code_execution_config={
                "work_dir": "scratch/coding",
                "use_docker": False
            },
        )
        
        message=f"""Using the research materials below, provide feed ack for the text below that is used to write a section for in a brief for the title {subject} that is about {topic},  
                    Here is the research material \n\n {research_material} \n\n
Here is the Text that you need to provide feedback on: \n\n{text}"""
        user_proxy.initiate_chat(manager, message=message)
        user_proxy.initiate_chat(
            assistant,
            message=message,
        )

        messages = user_proxy.chat_messages[assistant]  
        print(messages)
        return messages[1:]


 user_proxy = ExtendedUserProxyAgent(
            updater = self.ClientUpdator,
            name="admin", 
            is_termination_msg=lambda x: x.get("content", "") and x.get("content", "").rstrip().endswith("TERMINATE"),
            human_input_mode="TERMINATE",
            function_map={ 
                "Get_Feedback" : lambda **kwargs:  self.Get_Feedback(research_material,  subject, topic, **kwargs), 
            } 
        )
         