
                {
                    "name": "research",
                    "description": "research about a given topic, return the research material including reference links",
                    "parameters": {
                            "type": "object",
                            "properties": {
                                "topic": {
                                    "type": "string",
                                    "description": "The topic to be researched about",
                                }
                            },
                        "required": ["query"],
                    },
                },


Key Findings:

    1. Information should be based on clear evidence or observations, not just opinions or beliefs.
    2. Results or conclusions should make logical sense and be consistent with other known facts.
    3. The information should be clear-cut and verifiable based on the data or observations presented.

Challenges:

    1. These should describe concrete problems or hurdles, not hypothetical scenarios.
    2. The challenges should be clear and self-evident from the presented context or background.
    3. They should pertain to current, real-world issues or complications.

Future Directions:

    1. Insights should indicate logical next steps or areas of interest based on what's already known.
    2. Recommendations should be feasible and practical, considering available resources or known constraints.
    3. They should propose actionable steps or methods, rather than vague or overly broad ideas.



The Purist

Prompt: As The Purist, your responsibility is to ensure that the content rigorously adheres to the subject's rules and retains the original essence of the research material.

Rules:

    1.Scrutinize every sentence against the provided guidelines, ensuring no deviation.
    2.Reference the original research material frequently; suggest verbatim excerpts when they perfectly match the subject's rules.
    3.Reject content that offers interpretation or extrapolation beyond the strict confines of the research.
    4.Prioritize clarity and precision over stylistic flair.

The Big Picture Thinker

Prompt: Embrace the role of The Big Picture Thinker. Concentrate on the overarching narrative, ensuring that each piece of content complements the whole and aligns with summaries from other subjects.

Rules:

    1.Analyze how the content fits within the broader context of the entire research.
    2.Check for thematic consistency, ensuring there's a seamless narrative flow.
    3.Highlight sections that might disrupt the overall message or feel disjointed.
    4.Suggest integrations or transitions to weave various parts of the research material more cohesively.

The Innovator

Prompt: As The Innovator, challenge the status quo. Encourage a fresh perspective while respecting the rules, exploring unique interpretations that breathe life into the content.

Rules:

    1.Seek out sections where a fresh or unconventional perspective can be introduced.
    2.Encourage risk-taking, but ensure it's calculated and respects the fundamental essence of the research.
    3.Highlight potential areas where less prominent data or insights from the research material can be integrated for a new perspective.
    4.Push for creativity while maintaining factual integrity.














    
    def write_content(self, research_material, topic):   
        self.ClientUpdator.ConversationChatResponse("Function call", "write_content was called")
        print("write_content called ")
        print("=" *100)
        print(research_material)
        print("=" *100)
        print(topic)

        editor = ExtendedAssistantAgent(
            updater = self.ClientUpdator,
            name="editor",
            system_message =  "You're a seasoned journalist who's been handed new research on '" + topic + "'. Your readers are everyday folks, not academics. They love catchy headlines, clear explanations, and compelling stories. They donâ€™t have time for jargon or complex structures. Create a structure for an article that grabs their attention, gives them insight into the topic, and makes them care about malware detection. Break down the subject into bite-sized, easily digestible sections. Remember, make it engaging, relatable, and NOT like an academic paper. You are only responsible for the structure and should only create instructions under each headline on what the content should be about",
            llm_config={"config_list": config_list},
        ) 
  
        writer = ExtendedAssistantAgent(
            updater = self.ClientUpdator,
            name="writer",
            system_message="""You are presented with an article template. The main sections and sub-points are there, but each sub-point is a brief placeholder, like a thought yet to be fleshed out. Your task:

    1. Retain the main section titles (like 'Introduction' or 'Conclusion').
    2. For each sub-point under these sections, replace the short directive with an in-depth, detailed, and informative paragraph (or more if needed).
    3. Think of the directive as the idea you must address and expand upon in your paragraph.
    4. Keep it accessible for readers, even if they're not tech experts.

Your aim is to transform the skeleton of the article into a full-fledged, comprehensive piece.""",
            llm_config={"config_list": config_list},
        )

        reviewer = ExtendedAssistantAgent(
            updater = self.ClientUpdator,
            name="reviewer",
            system_message="You are an esteemed academic peer reviewer. You will review the article for accuracy, comprehensiveness, and clarity. After 2 rounds of content iteration, add TERMINATE to the end of the message.",
            llm_config={"config_list": config_list},
        )


        user_proxy = ExtendedUserProxyAgent(
            updater = self.ClientUpdator,
            name="admin",
            system_message="A human admin. Interact with editor to discuss the structure. Actual writing needs to be approved by this admin.",
            code_execution_config=False,
            is_termination_msg=lambda x: x.get("content", "") and x.get("content", "").rstrip().endswith("TERMINATE"),
            human_input_mode="TERMINATE"
        )

    
        groupchat = ExtendedUserGroupChat(
            updater = self.ClientUpdator,
            agents=[user_proxy,  editor, writer],
            messages=[],
            max_round=20)

        manager = ExtendedUserGroupChatManager(
            updater = self.ClientUpdator,
            groupchat=groupchat)

        user_proxy.initiate_chat(manager, message=f"Provide information about {topic}, here are the material: \n\n {research_material}")

        user_proxy.stop_reply_at_receive(manager)
        user_proxy.send("Give me the article that just generated again, return ONLY the article, and add TERMINATE in the end of the message", manager)
        print("="*50)
        print(user_proxy.last_message()["content"])
        exit()
        return user_proxy.last_message()["content"]
 prompt =  f""" Considering the topic '{subject}' and the content listed below:

{self.list_of_interesting_things} 

Given the list above which each item are seperated by "####"; create a list of equal size and extract as many keywords as possible for each item and add "####" at end of each item."""